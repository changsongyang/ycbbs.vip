<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <link rel="canonical" href="https://blog.csdn.net/liaokailin/article/details/49107209"/>
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
    <meta name="renderer" content="webkit"/>
    <meta name="force-rendering" content="webkit"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="referrer" content="always">
    <meta http-equiv="Cache-Control" content="no-siteapp" /><link rel="alternate" media="handheld" href="#" />
    <meta name="shenma-site-verification" content="5a59773ab8077d4a62bf469ab966a63b_1497598848">
        <meta name="csdn-baidu-search"  content='{"autorun":true,"install":true,"keyword":"spring boot实战(第十篇)Spring boot Bean加载源码分析 - liaokailin的专栏"}'>
    
    <link href="https://csdnimg.cn/public/favicon.ico" rel="SHORTCUT ICON">
    <title>spring boot实战(第十篇)Spring boot Bean加载源码分析 - liaokailin的专栏 - CSDN博客</title>

        
                    <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/detail-d5bbc970f8.min.css">
            
            <script type="application/ld+json">{"@context":"https:\/\/ziyuan.baidu.com\/contexts\/cambrian.jsonld","@id":"https:\/\/blog.csdn.net\/liaokailin\/article\/details\/49107209","appid":"1563894916825412","title":"spring boot\u5b9e\u6218(\u7b2c\u5341\u7bc7)Spring boot Bean\u52a0\u8f7d\u6e90\u7801\u5206\u6790 - liaokailin\u7684\u4e13\u680f","images":["https:\/\/img-blog.csdn.net\/20170226170131304"],"pubDate":"2019-03-18T08:36:06"}</script>
        
          <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/themes/skin3-template/skin3-template-9b39979775.min.css">
        <script type="text/javascript">
        var username = "liaokailin";
        var blog_address = "https://blog.csdn.net/liaokailin";
        var static_host = "https://csdnimg.cn/release/phoenix/";
        var currentUserName = "";
        var isShowAds = true;
        var isOwner = false;
        var loginUrl = "http://passport.csdn.net/account/login?from=https://blog.csdn.net/liaokailin/article/details/49107209"
        var blogUrl = "https://blog.csdn.net/";
        //页面皮肤样式
        var curSkin = "skin3-template";
        // 第四范式所需数据
        var articleTitles = "spring boot实战(第十篇)Spring boot Bean加载源码分析 - liaokailin的专栏";
        var articleID = "49107209";
        
        var nickName = "liaokailin";
        var isCorporate = false;
        var subDomainBlogUrl = "https://blog.csdn.net/"
        var digg_base_url = "https://blog.csdn.net/liaokailin/phoenix/comment";
    </script>
    <script type="text/javascript">
        // Traffic Stats of the entire Web site By baidu
        var _hmt = _hmt || [];
        (function() {
            var hm = document.createElement("script");
            hm.src = "https://hm.baidu.com/hm.js?6bcd52f51e9b3dce32bec4a3997715ac";
            var s = document.getElementsByTagName("script")[0];
            s.parentNode.insertBefore(hm, s);
        })();
        // Traffic Stats of the entire Web site By baidu end
    </script>
    <script src="https://csdnimg.cn/public/common/libs/jquery/jquery-1.9.1.min.js" type="text/javascript"></script>
    <script src="https://csdnimg.cn/rabbit/exposure-click/main-1.0.6.js"></script>
    <script src="//g.csdnimg.cn/fixed-sidebar/1.1.3/fixed-sidebar.js" type="text/javascript"></script>
    <!-- 新版上报 -->
    <script src="//g.csdnimg.cn/track/1.2.4/track.js" type="text/javascript"></script>
    <!-- 新版上报end -->
            <link rel="stylesheet" href="https://csdnimg.cn/public/sandalstrap/1.4/css/sandalstrap.min.css">
    <style>
        .MathJax, .MathJax_Message, .MathJax_Preview{
            display: none
        }
    </style>
</head>
<!-- nodata 第三栏接口无数据时样式不变 -->
<body class="nodata " > 
    <link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css">
    <script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script>
<div id="kp_box_476" data-pid="476" data-track-view='{"mod":"kp_popu_476-845","con":",,"}' data-track-click='{"mod":"kp_popu_476-845","con":",,"}'><script src="//csdnimg.cn/public/common/indexSuperise/1.0.3/indexSuperise.js?20190103190825"></script>
<script>
 window.csdn.indexSuperise({
      smallMoveImg: '//img-ads.csdn.net/2019/201903011105473949.png',
      bigMoveImg: '//img-ads.csdn.net/2019/201903011116302083.png',
     link:'//edu.csdn.net/topic/ai30?utm_source=blogpopup',
boxStyle:140,
trackSuperId:476,
smallMove:'notMove',  
trackSId:845
    });
</script></div><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css">
<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css">
<script type="text/javascript">
	// 容错处理
	var NEWS_FEED = function(){}
</script>
<script type="text/javascript" src="//static.mediav.com/js/mvf_news_feed.js"></script>
<script type="text/javascript" src="//g.csdnimg.cn/copyright/1.0.3/copyright.js"></script>
<div style="display:none;">
	<img src="" onerror='setTimeout(function(){if(!/(csdn.net|iteye.com|baiducontent.com|googleusercontent.com|360webcache.com|sogoucdn.com|bingj.com|baidu.com)$/.test(window.location.hostname)){window.location.href="\x68\x74\x74\x70\x73\x3a\x2f\x2f\x77\x77\x77\x2e\x63\x73\x64\x6e\x2e\x6e\x65\x74"}},3000);'>
</div>
<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/chart-3456820cac.css" />
<script src="https://dup.baidustatic.com/js/ds.js"></script>
<div class="container clearfix" id="mainBox">
			<div class="recommend-right">
  <ul class="recommend-fixed-box">
    
  </ul>
</div>	
    <main>
        <div class="blog-content-box">
	<div class="article-header-box">
		<div class="article-header">
			<div class="article-title-box">
				<span class="article-type type-1 float-left">原</span>				<h1 class="title-article">spring boot实战(第十篇)Spring boot Bean加载源码分析</h1>
			</div>
			<div class="article-info-box">
				<div class="article-bar-top">
																				<span class="time">2015年10月13日 23:30:30</span>
					<a class="follow-nickName" href="https://me.csdn.net/liaokailin" target="_blank">liaokailin</a>
						<span class="read-count">阅读数：30861</span>
						
														<span class="tags-box artic-tag-box">
								<span class="label">标签：</span>
																<a data-track-click='{"mod":"popu_626","con":"springboot"}' data-track-view='{"mod":"popu_626","con":"springboot"}' class="tag-link" href="http://so.csdn.net/so/search/s.do?q=springboot&t=blog" target="_blank">springboot																<a data-track-click='{"mod":"popu_626","con":"源码"}' data-track-view='{"mod":"popu_626","con":"源码"}' class="tag-link" href="http://so.csdn.net/so/search/s.do?q=源码&t=blog" target="_blank">源码																<a data-track-click='{"mod":"popu_626","con":"Import"}' data-track-view='{"mod":"popu_626","con":"Import"}' class="tag-link" href="http://so.csdn.net/so/search/s.do?q=Import&t=blog" target="_blank">Import																<a data-track-click='{"mod":"popu_626","con":"Configuration"}' data-track-view='{"mod":"popu_626","con":"Configuration"}' class="tag-link" href="http://so.csdn.net/so/search/s.do?q=Configuration&t=blog" target="_blank">Configuration																<a data-track-click='{"mod":"popu_626","con":"Bean"}' data-track-view='{"mod":"popu_626","con":"Bean"}' class="tag-link" href="http://so.csdn.net/so/search/s.do?q=Bean&t=blog" target="_blank">Bean																</a>
							</span>
																					<div class="tags-box space">
								<span class="label">个人分类：</span>
																<a class="tag-link" href="https://blog.csdn.net/liaokailin/article/category/5765237"  target="_blank">spring boot实战																</a>
							</div>
																								</div>
				<div class="operating">
									</div>
			</div>
		</div>
	</div>
	<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
						<div class="htmledit_views" id="content_views">
                
<h1>前言</h1>
<div><span></span>前面的文章描述了Application对应Bean的创建，本篇将阐述spring boot中bean的创建过程</div>
<div><br /></div>
<div>
<h1>refresh</h1>
<br /></div>
<div><span></span>首先来看SpringApplication#run方法中refresh()方法</div>
<div><pre><code class="language-html">// Refresh the context
			refresh(context);</code></pre><br /><span></span>调用的是<span></span>AbstractApplicationContext中的refresh方法<span></span><pre><code class="language-html">protected void refresh(ApplicationContext applicationContext) {
		Assert.isInstanceOf(AbstractApplicationContext.class, applicationContext);
		((AbstractApplicationContext) applicationContext).refresh();
	}</code></pre><span></span></div>
<div><span></span>方法定义如下:</div>
<div><pre><code class="language-html">public void refresh() throws BeansException, IllegalStateException {
		synchronized (this.startupShutdownMonitor) {
			// Prepare this context for refreshing.
			prepareRefresh();

			// Tell the subclass to refresh the internal bean factory.
			ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();

			// Prepare the bean factory for use in this context.
			prepareBeanFactory(beanFactory);

			try {
				// Allows post-processing of the bean factory in context subclasses.
				postProcessBeanFactory(beanFactory);

				// Invoke factory processors registered as beans in the context.
				invokeBeanFactoryPostProcessors(beanFactory);

				// Register bean processors that intercept bean creation.
				registerBeanPostProcessors(beanFactory);

				// Initialize message source for this context.
				initMessageSource();

				// Initialize event multicaster for this context.
				initApplicationEventMulticaster();

				// Initialize other special beans in specific context subclasses.
				onRefresh();

				// Check for listener beans and register them.
				registerListeners();

				// Instantiate all remaining (non-lazy-init) singletons.
				finishBeanFactoryInitialization(beanFactory);

				// Last step: publish corresponding event.
				finishRefresh();
			}

			catch (BeansException ex) {
				logger.warn("Exception encountered during context initialization - cancelling refresh attempt", ex);

				// Destroy already created singletons to avoid dangling resources.
				destroyBeans();

				// Reset 'active' flag.
				cancelRefresh(ex);

				// Propagate exception to caller.
				throw ex;
			}
		}
	}</code></pre><br /><span></span>该方法中涉及的过程非常多，需要一步步来分析</div>
<div><br /></div>
<div><span></span>获取BeanFactory</div>
<div><pre><code class="language-html">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</code></pre><span> </span></div>
<div><span></span>通过前面的文章应该知道对应的BeanFactory为DefaultListableBeanFactory</div>
<div> </div>
<div><span></span>直奔主题来看如下方法</div>
<div><pre><code class="language-html">	invokeBeanFactoryPostProcessors(beanFactory);</code></pre><span><br /></span><pre><code class="language-html">protected void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory) {
		PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());
	}</code></pre><span> </span></div>
<div><span></span>首先来看getBeanFactoryPostProcessors(),其对应值为：ConfigurationWarningsApplicationContextInitializer$ConfigurationWarningsPostProcessor、PropertySourceOrderingPostProcessor</div>
<div><br /></div>
<div><span></span>ConfigurationWarningsApplicationContextInitializer是在ConfigurationWarningsApplicationContextInitializer中执行</div>
<div><pre><code class="language-html">public void initialize(ConfigurableApplicationContext context) {
		context.addBeanFactoryPostProcessor(new ConfigurationWarningsPostProcessor(
				getChecks()));
	}</code></pre>添加<br /><br /></div>
<div><span></span></div>
<div><span></span>PropertySourceOrderingPostProcessor是在ConfigFileApplicationListener执行</div>
<div><pre><code class="language-html">protected void addPostProcessors(ConfigurableApplicationContext context) {
		context.addBeanFactoryPostProcessor(new PropertySourceOrderingPostProcessor(
				context));
	}</code></pre>添加<br /><br /><span></span>来看invokeBeanFactoryPostProcessors方法</div>
<div><br /></div>
<div><pre><code class="language-html">public static void invokeBeanFactoryPostProcessors(
			ConfigurableListableBeanFactory beanFactory, List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessors) {

		// Invoke BeanDefinitionRegistryPostProcessors first, if any.
		Set&lt;String&gt; processedBeans = new HashSet&lt;String&gt;();

		if (beanFactory instanceof BeanDefinitionRegistry) {
			...//处理后处理器
			 
			String[] postProcessorNames =
					beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);

			// First, invoke the BeanDefinitionRegistryPostProcessors that implement PriorityOrdered.
			List&lt;BeanDefinitionRegistryPostProcessor&gt; priorityOrderedPostProcessors = new ArrayList&lt;BeanDefinitionRegistryPostProcessor&gt;();
			for (String ppName : postProcessorNames) {
				if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) {
					priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));
					processedBeans.add(ppName);
				}
			}
			OrderComparator.sort(priorityOrderedPostProcessors);
			registryPostProcessors.addAll(priorityOrderedPostProcessors);
			invokeBeanDefinitionRegistryPostProcessors(priorityOrderedPostProcessors, registry);

			// Next, invoke the BeanDefinitionRegistryPostProcessors that implement Ordered.
			postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);
			List&lt;BeanDefinitionRegistryPostProcessor&gt; orderedPostProcessors = new ArrayList&lt;BeanDefinitionRegistryPostProcessor&gt;();
			for (String ppName : postProcessorNames) {
				if (!processedBeans.contains(ppName) &amp;&amp; beanFactory.isTypeMatch(ppName, Ordered.class)) {
					orderedPostProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));
					processedBeans.add(ppName);
				}
			}
			OrderComparator.sort(orderedPostProcessors);
			registryPostProcessors.addAll(orderedPostProcessors);
			invokeBeanDefinitionRegistryPostProcessors(orderedPostProcessors, registry);

			// Finally, invoke all other BeanDefinitionRegistryPostProcessors until no further ones appear.
			boolean reiterate = true;
			while (reiterate) {
				reiterate = false;
				postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);
				for (String ppName : postProcessorNames) {
					if (!processedBeans.contains(ppName)) {
						BeanDefinitionRegistryPostProcessor pp = beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class);
						registryPostProcessors.add(pp);
						processedBeans.add(ppName);
						pp.postProcessBeanDefinitionRegistry(registry);
						reiterate = true;
					}
				}
			}

			// Now, invoke the postProcessBeanFactory callback of all processors handled so far 执行后处理器
			invokeBeanFactoryPostProcessors(registryPostProcessors, beanFactory);
			invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory);
		}</code></pre><br /><span></span>
<p class="p1"></p>
<pre><code class="language-html">String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);</code></pre><span> </span>按照bean的类型获取类型为BeanDefinitionRegistryPostProcessor的bean，这里获取到的bean名称为：
<p></p>
<p class="p1"><span class="s1"><span></span>org.springframework.context.annotation.internalConfigurationAnnotationProcessor；对应的Class为</span>ConfigurationClassPostProcessor</p>
<p class="p1"><span></span>在前面文章中创建上下文的时候beanfactory创建了该bean。</p>
<p class="p1"><span></span>经过排序后执行如下方法</p>
<p class="p1"></p>
<pre><code class="language-html">invokeBeanDefinitionRegistryPostProcessors(priorityOrderedPostProcessors, registry);</code></pre><span> </span>
<p></p>
<p class="p1"><span></span></p>
<pre><code class="language-html">private static void invokeBeanDefinitionRegistryPostProcessors(
			Collection&lt;? extends BeanDefinitionRegistryPostProcessor&gt; postProcessors, BeanDefinitionRegistry registry) {

		for (BeanDefinitionRegistryPostProcessor postProcessor : postProcessors) {
			postProcessor.postProcessBeanDefinitionRegistry(registry);
		}
	}</code></pre><br /><span></span>实际调用<span>ConfigurationClassPostProcessor#</span>postProcessBeanDefinitionRegistry
<p></p>
<p class="p1"><span></span></p>
<pre><code class="language-html">public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {
		...//注册若干bean
		processConfigBeanDefinitions(registry);
	}</code></pre><br /><span></span>processConfigBeanDefinitions(<span class="s1">registry</span>)如下：
<p></p>
<p class="p1"></p>
<pre><code class="language-html">public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {
		Set&lt;BeanDefinitionHolder&gt; configCandidates = new LinkedHashSet&lt;BeanDefinitionHolder&gt;();
		String[] candidateNames = registry.getBeanDefinitionNames();

		for (String beanName : candidateNames) {
			BeanDefinition beanDef = registry.getBeanDefinition(beanName);
			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||
					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {
				if (logger.isDebugEnabled()) {
					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef);
				}
			}
			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {
				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName));
			}
		}

		// Return immediately if no @Configuration classes were found
		if (configCandidates.isEmpty()) {
			return;
		}

		// Detect any custom bean name generation strategy supplied through the enclosing application context
		SingletonBeanRegistry singletonRegistry = null;
		if (registry instanceof SingletonBeanRegistry) {
			singletonRegistry = (SingletonBeanRegistry) registry;
			if (!this.localBeanNameGeneratorSet &amp;&amp; singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {
				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR);
				this.componentScanBeanNameGenerator = generator;
				this.importBeanNameGenerator = generator;
			}
		}

		// Parse each @Configuration class
		ConfigurationClassParser parser = new ConfigurationClassParser(
				this.metadataReaderFactory, this.problemReporter, this.environment,
				this.resourceLoader, this.componentScanBeanNameGenerator, registry);

		Set&lt;ConfigurationClass&gt; alreadyParsed = new HashSet&lt;ConfigurationClass&gt;(configCandidates.size());
		do {
			parser.parse(configCandidates);
			parser.validate();

			Set&lt;ConfigurationClass&gt; configClasses = new LinkedHashSet&lt;ConfigurationClass&gt;(parser.getConfigurationClasses());
			configClasses.removeAll(alreadyParsed);

			// Read the model and create bean definitions based on its content
			if (this.reader == null) {
				this.reader = new ConfigurationClassBeanDefinitionReader(registry, this.sourceExtractor,
						this.problemReporter, this.metadataReaderFactory, this.resourceLoader, this.environment,
						this.importBeanNameGenerator, parser.getImportRegistry());
			}
			this.reader.loadBeanDefinitions(configClasses);
			alreadyParsed.addAll(configClasses);

			configCandidates.clear();
			if (registry.getBeanDefinitionCount() &gt; candidateNames.length) {
				String[] newCandidateNames = registry.getBeanDefinitionNames();
				Set&lt;String&gt; oldCandidateNames = new HashSet&lt;String&gt;(Arrays.asList(candidateNames));
				Set&lt;String&gt; alreadyParsedClasses = new HashSet&lt;String&gt;();
				for (ConfigurationClass configurationClass : alreadyParsed) {
					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName());
				}
				for (String candidateName : newCandidateNames) {
					if (!oldCandidateNames.contains(candidateName)) {
						BeanDefinition beanDef = registry.getBeanDefinition(candidateName);
						if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory) &amp;&amp;
								!alreadyParsedClasses.contains(beanDef.getBeanClassName())) {
							configCandidates.add(new BeanDefinitionHolder(beanDef, candidateName));
						}
					}
				}
				candidateNames = newCandidateNames;
			}
		}
		while (!configCandidates.isEmpty());

		// Register the ImportRegistry as a bean in order to support ImportAware @Configuration classes
		if (singletonRegistry != null) {
			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {
				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry());
			}
		}

		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {
			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache();
		}
	}</code></pre><br /><span></span>又是一段很长的代码
<p></p>
<p class="p1"></p>
<pre><code class="language-html">String[] candidateNames = registry.getBeanDefinitionNames();</code></pre><span> </span>获取已经注册的bean名称，其信息为:
<p></p>
<p class="p1"><img src="" alt="" /><br /><span></span>这里看到上一篇中创建的Application对应bean</p>
<p class="p1"></p>
<pre><code class="language-html">for (String beanName : candidateNames) {
			BeanDefinition beanDef = registry.getBeanDefinition(beanName);
			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||
					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {
				if (logger.isDebugEnabled()) {
					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef);
				}
			}
			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {
				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName));
			}
		}</code></pre><br /><span></span>判断对应bean是否为配置文件bean（包含Configuration注解），经过筛选只有Application对应bean满足条件
<p></p>
<p class="p1"><span></span></p>
<pre><code class="language-html">	ConfigurationClassParser parser = new ConfigurationClassParser(
				this.metadataReaderFactory, this.problemReporter, this.environment,
				this.resourceLoader, this.componentScanBeanNameGenerator, registry);
</code></pre><span></span>该代码构造了<span>Configuration类解析器</span>
<p></p>
<p class="p1"><span>执行</span></p>
<p class="p1"><span></span></p>
<pre><code class="language-html">parser.parse(configCandidates);</code></pre><br /><span></span><pre><code class="language-html">public void parse(Set&lt;BeanDefinitionHolder&gt; configCandidates) {
		this.deferredImportSelectors = new LinkedList&lt;DeferredImportSelectorHolder&gt;();

		for (BeanDefinitionHolder holder : configCandidates) {
			BeanDefinition bd = holder.getBeanDefinition();
			try {
				if (bd instanceof AnnotatedBeanDefinition) {   //执行该部分代码
					parse(((AnnotatedBeanDefinition) bd).getMetadata(), holder.getBeanName());
				}
				else if (bd instanceof AbstractBeanDefinition &amp;&amp; ((AbstractBeanDefinition) bd).hasBeanClass()) {
					parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName());
				}
				else {
					parse(bd.getBeanClassName(), holder.getBeanName());
				}
			}
			catch (BeanDefinitionStoreException ex) {
				throw ex;
			}
			catch (Exception ex) {
				throw new BeanDefinitionStoreException(
						"Failed to parse configuration class [" + bd.getBeanClassName() + "]", ex);
			}
		}

		processDeferredImportSelectors();
	}</code></pre><br /><span></span>调用
<p></p>
<p class="p1"><span></span></p>
<pre><code class="language-html">parse(((AnnotatedBeanDefinition) bd).getMetadata(), holder.getBeanName());</code></pre><br /><span></span>最终调用
<p></p>
<p class="p1"><span></span></p>
<pre><code class="language-html">protected void processConfigurationClass(ConfigurationClass configClass) throws IOException {
		if (this.conditionEvaluator.shouldSkip(configClass.getMetadata(), ConfigurationPhase.PARSE_CONFIGURATION)) {
			return;
		}

		ConfigurationClass existingClass = this.configurationClasses.get(configClass);
		if (existingClass != null) {
			if (configClass.isImported()) {
				if (existingClass.isImported()) {
					existingClass.mergeImportedBy(configClass);
				}
				// Otherwise ignore new imported config class; existing non-imported class overrides it.
				return;
			}
			else {
				// Explicit bean definition found, probably replacing an import.
				// Let's remove the old one and go with the new one.
				this.configurationClasses.remove(configClass);
				for (Iterator&lt;ConfigurationClass&gt; it = this.knownSuperclasses.values().iterator(); it.hasNext(); ) {
					if (configClass.equals(it.next())) {
						it.remove();
					}
				}
			}
		}

		// Recursively process the configuration class and its superclass hierarchy.
		SourceClass sourceClass = asSourceClass(configClass);
		do {
			sourceClass = doProcessConfigurationClass(configClass, sourceClass);
		}
		while (sourceClass != null);

		this.configurationClasses.put(configClass, configClass);
	}</code></pre><br /><span></span>首先判断该bean是否被跳过（该部分代码上一篇已说明），然后对Class进行包装，调用<span class="s1">sourceClass</span> = doProcessConfigurationClass(<span class="s1">configClass</span>,<span class="s1">sourceClass</span>)处理Application类
<p></p>
<h2>解析Configuration注解</h2>
<p class="p1"></p>
<pre><code class="language-html">protected final SourceClass doProcessConfigurationClass(ConfigurationClass configClass, SourceClass sourceClass) throws IOException {
		// Recursively process any member (nested) classes first
		processMemberClasses(configClass, sourceClass);

		// Process any @PropertySource annotations
		for (AnnotationAttributes propertySource : AnnotationConfigUtils.attributesForRepeatable(
				sourceClass.getMetadata(), PropertySources.class, org.springframework.context.annotation.PropertySource.class)) {
			if (this.environment instanceof ConfigurableEnvironment) {
				processPropertySource(propertySource);
			}
			else {
				logger.warn("Ignoring @PropertySource annotation on [" + sourceClass.getMetadata().getClassName() +
						"]. Reason: Environment must implement ConfigurableEnvironment");
			}
		}

		// Process any @ComponentScan annotations
		AnnotationAttributes componentScan = AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(), ComponentScan.class);
		if (componentScan != null &amp;&amp; !this.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {
			// The config class is annotated with @ComponentScan -&gt; perform the scan immediately
			Set&lt;BeanDefinitionHolder&gt; scannedBeanDefinitions =
					this.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());
			// Check the set of scanned definitions for any further config classes and parse recursively if necessary
			for (BeanDefinitionHolder holder : scannedBeanDefinitions) {
				if (ConfigurationClassUtils.checkConfigurationClassCandidate(holder.getBeanDefinition(), this.metadataReaderFactory)) {
					parse(holder.getBeanDefinition().getBeanClassName(), holder.getBeanName());
				}
			}
		}

		// Process any @Import annotations
		processImports(configClass, sourceClass, getImports(sourceClass), true);

		// Process any @ImportResource annotations
		if (sourceClass.getMetadata().isAnnotated(ImportResource.class.getName())) {
			AnnotationAttributes importResource = AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(), ImportResource.class);
			String[] resources = importResource.getStringArray("value");
			Class&lt;? extends BeanDefinitionReader&gt; readerClass = importResource.getClass("reader");
			for (String resource : resources) {
				String resolvedResource = this.environment.resolveRequiredPlaceholders(resource);
				configClass.addImportedResource(resolvedResource, readerClass);
			}
		}

		// Process individual @Bean methods
		Set&lt;MethodMetadata&gt; beanMethods = sourceClass.getMetadata().getAnnotatedMethods(Bean.class.getName());
		for (MethodMetadata methodMetadata : beanMethods) {
			configClass.addBeanMethod(new BeanMethod(methodMetadata, configClass));
		}

		// Process superclass, if any
		if (sourceClass.getMetadata().hasSuperClass()) {
			String superclass = sourceClass.getMetadata().getSuperClassName();
			if (!superclass.startsWith("java") &amp;&amp; !this.knownSuperclasses.containsKey(superclass)) {
				this.knownSuperclasses.put(superclass, configClass);
				// Superclass found, return its annotation metadata and recurse
				return sourceClass.getSuperClass();
			}
		}

		// No superclass -&gt; processing is complete
		return null;
	}</code></pre><br /><span></span>到这里就看到了如何去解析Application类
<p></p>
<p class="p1"><span><span></span></span></p>
<pre><code class="language-html">processMemberClasses(configClass, sourceClass);</code></pre><span></span>处理其中内部类，解析内部类的过程和外部类相似，因此继续看下面的代码
<p></p>
<h2><span><span>处理</span><span>PropertySource注解</span></span></h2>
<p class="p1"><span></span></p>
<pre><code class="language-html">// Process any @PropertySource annotations
		for (AnnotationAttributes propertySource : AnnotationConfigUtils.attributesForRepeatable(
				sourceClass.getMetadata(), PropertySources.class, org.springframework.context.annotation.PropertySource.class)) {
			if (this.environment instanceof ConfigurableEnvironment) {
				processPropertySource(propertySource);
			}
			else {
				logger.warn("Ignoring @PropertySource annotation on [" + sourceClass.getMetadata().getClassName() +
						"]. Reason: Environment must implement ConfigurableEnvironment");
			}
		}&lt;pre name="code" class="html"&gt;
</code></pre><pre><code class="language-html"></pre><p></p><pre></code></pre>
<p></p>
<p class="p1"></p>
<p class="p1">其核心操作：</p>
<p class="p1"></p>
<pre><code class="language-html">private void processPropertySource(AnnotationAttributes propertySource) throws IOException {
		String name = propertySource.getString("name");
		String[] locations = propertySource.getStringArray("value");
		boolean ignoreResourceNotFound = propertySource.getBoolean("ignoreResourceNotFound");
		Assert.isTrue(locations.length &gt; 0, "At least one @PropertySource(value) location is required");
		for (String location : locations) {
			try {
				String resolvedLocation = this.environment.resolveRequiredPlaceholders(location);
				Resource resource = this.resourceLoader.getResource(resolvedLocation);
				ResourcePropertySource rps = (StringUtils.hasText(name) ?
						new ResourcePropertySource(name, resource) : new ResourcePropertySource(resource));
				addPropertySource(rps);
			}
			catch (IllegalArgumentException ex) {
				// from resolveRequiredPlaceholders
				if (!ignoreResourceNotFound) {
					throw ex;
				}
			}
			catch (FileNotFoundException ex) {
				// from ResourcePropertySource constructor
				if (!ignoreResourceNotFound) {
					throw ex;
				}
			}
		}
	}</code></pre><span> </span>通过注解中的信息获取资源信息，然后添加到MutablePropertySources<span class="s1">propertySources</span> = ((ConfigurableEnvironment)<span class="s2">this</span>.<span class="s3">environment</span>).getPropertySources()中，该内容前面已有讲述
<p></p>
<h2>解析ComponentScan注解</h2>
<p class="p1"></p>
<pre><code class="language-html">// Process any @ComponentScan annotations
		AnnotationAttributes componentScan = AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(), ComponentScan.class);
		if (componentScan != null &amp;&amp; !this.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {
			// The config class is annotated with @ComponentScan -&gt; perform the scan immediately
			Set&lt;BeanDefinitionHolder&gt; scannedBeanDefinitions =
					this.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());
			// Check the set of scanned definitions for any further config classes and parse recursively if necessary
			for (BeanDefinitionHolder holder : scannedBeanDefinitions) {
				if (ConfigurationClassUtils.checkConfigurationClassCandidate(holder.getBeanDefinition(), this.metadataReaderFactory)) {
					parse(holder.getBeanDefinition().getBeanClassName(), holder.getBeanName());
				}
			}
		}</code></pre><span> </span>ComponentScan注解的作用大家都明白，扫描执行路径下bean信息，那么具体是如何实现的？需要跟进去看代码，调用
<p></p>
<p class="p1"></p>
<pre><code class="language-html">Set&lt;BeanDefinitionHolder&gt; scannedBeanDefinitions =
					this.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());</code></pre><br /><pre><code class="language-html">public Set&lt;BeanDefinitionHolder&gt; parse(AnnotationAttributes componentScan, final String declaringClass) {
		 ...//通过注解中的信息设置扫描器的参数信息
		return scanner.doScan(StringUtils.toStringArray(basePackages));
	}</code></pre><br /><span></span>代码中忽略了扫描器对应的参数信息，直接看doScan方法
<p></p>
<p class="p1"><span></span></p>
<pre><code class="language-html">	protected Set&lt;BeanDefinitionHolder&gt; doScan(String... basePackages) {
		Assert.notEmpty(basePackages, "At least one base package must be specified");
		Set&lt;BeanDefinitionHolder&gt; beanDefinitions = new LinkedHashSet&lt;BeanDefinitionHolder&gt;();
		for (String basePackage : basePackages) {
			Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);
			for (BeanDefinition candidate : candidates) {
				ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate);
				candidate.setScope(scopeMetadata.getScopeName());
				String beanName = this.beanNameGenerator.generateBeanName(candidate, this.registry);
				if (candidate instanceof AbstractBeanDefinition) {
					postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName);
				}
				if (candidate instanceof AnnotatedBeanDefinition) {
					AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate);
				}
				if (checkCandidate(beanName, candidate)) {
					BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(candidate, beanName);
					definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry);
					beanDefinitions.add(definitionHolder);
					registerBeanDefinition(definitionHolder, this.registry);
				}
			}
		}
		return beanDefinitions;
	}</code></pre><span></span>遍历basePackages信息，<pre><code class="language-html">Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);</code></pre><span><span></span>查询</span>类路径下申明的组件信息，<br /><pre><code class="language-html">public Set&lt;BeanDefinition&gt; findCandidateComponents(String basePackage) {
		Set&lt;BeanDefinition&gt; candidates = new LinkedHashSet&lt;BeanDefinition&gt;();
		try {
			String packageSearchPath = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +
					resolveBasePackage(basePackage) + "/" + this.resourcePattern;
			Resource[] resources = this.resourcePatternResolver.getResources(packageSearchPath);
			boolean traceEnabled = logger.isTraceEnabled();
			boolean debugEnabled = logger.isDebugEnabled();
			for (Resource resource : resources) {
				if (traceEnabled) {
					logger.trace("Scanning " + resource);
				}
				if (resource.isReadable()) {
					try {
						MetadataReader metadataReader = this.metadataReaderFactory.getMetadataReader(resource);
						if (isCandidateComponent(metadataReader)) {
							ScannedGenericBeanDefinition sbd = new ScannedGenericBeanDefinition(metadataReader);
							sbd.setResource(resource);
							sbd.setSource(resource);
							if (isCandidateComponent(sbd)) {
								if (debugEnabled) {
									logger.debug("Identified candidate component class: " + resource);
								}
								candidates.add(sbd);
							}
							else {
								if (debugEnabled) {
									logger.debug("Ignored because not a concrete top-level class: " + resource);
								}
							}
						}
						else {
							if (traceEnabled) {
								logger.trace("Ignored because not matching any filter: " + resource);
							}
						}
					}
					catch (Throwable ex) {
						throw new BeanDefinitionStoreException(
								"Failed to read candidate component class: " + resource, ex);
					}
				}
				else {
					if (traceEnabled) {
						logger.trace("Ignored because not readable: " + resource);
					}
				}
			}
		}
		catch (IOException ex) {
			throw new BeanDefinitionStoreException("I/O failure during classpath scanning", ex);
		}
		return candidates;
	}
</code></pre>
<p></p>
<div><br /></div>
<span></span>看<pre><code class="language-html">Resource[] resources = this.resourcePatternResolver.getResources(packageSearchPath);</code></pre>
<p></p>
<p class="p1"></p>
<p class="p1"><span></span></p>
<pre><code class="language-html">public Resource[] getResources(String locationPattern) throws IOException {
		Assert.notNull(locationPattern, "Location pattern must not be null");
		if (locationPattern.startsWith(CLASSPATH_ALL_URL_PREFIX)) {
			// a class path resource (multiple resources for same name possible)
			if (getPathMatcher().isPattern(locationPattern.substring(CLASSPATH_ALL_URL_PREFIX.length()))) {
				// a class path resource pattern
				return findPathMatchingResources(locationPattern);
			}
			else {
				// all class path resources with the given name
				return findAllClassPathResources(locationPattern.substring(CLASSPATH_ALL_URL_PREFIX.length()));
			}
		}
		else {
			// Only look for a pattern after a prefix here
			// (to not get fooled by a pattern symbol in a strange prefix).
			int prefixEnd = locationPattern.indexOf(":") + 1;
			if (getPathMatcher().isPattern(locationPattern.substring(prefixEnd))) {
				// a file pattern
				return findPathMatchingResources(locationPattern);
			}
			else {
				// a single resource with the given name
				return new Resource[] {getResourceLoader().getResource(locationPattern)};
			}
		}
	}</code></pre><br /><p></p>
<span></span>解析路径信息，这里spring有自己的一套继续规则，通过findPathMatchingResources()检索到指定类路径下所有的*.class文件，然后调用findAllClassPathResources解析Class文件
<p class="p1"></p>
<pre><code class="language-html">protected Resource[] findAllClassPathResources(String location) throws IOException {
		String path = location;
		if (path.startsWith("/")) {
			path = path.substring(1);
		}
		Set&lt;Resource&gt; result = doFindAllClassPathResources(path);
		return result.toArray(new Resource[result.size()]);
	}</code></pre><br /><span></span><pre><code class="language-html">protected Set&lt;Resource&gt; doFindAllClassPathResources(String path) throws IOException {
		Set&lt;Resource&gt; result = new LinkedHashSet&lt;Resource&gt;(16);
		ClassLoader cl = getClassLoader();
		Enumeration&lt;URL&gt; resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path));
		while (resourceUrls.hasMoreElements()) {
			URL url = resourceUrls.nextElement();
			result.add(convertClassLoaderURL(url));
		}
		if ("".equals(path)) {
			// The above result is likely to be incomplete, i.e. only containing file system references.
			// We need to have pointers to each of the jar files on the classpath as well...
			addAllClassLoaderJarRoots(cl, result);
		}
		return result;
	}</code></pre><br /><span></span>通过上面的代码可以发现，在获取到path路径以后spring采用类加载器获取指定Class文件对应的资源信息
<p></p>
<p class="p1"><br /></p>
<p class="p1"><span></span>获取完资源信息后调用</p>
<p class="p1"></p>
<pre><code class="language-html">MetadataReader metadataReader = this.metadataReaderFactory.getMetadataReader(resource);</code></pre><span> </span>解析资源信息对应的元数据
<p></p>
<p class="p1"><br /></p>
<p class="p1"></p>
<pre><code class="language-html">if (isCandidateComponent(metadataReader)) {
							ScannedGenericBeanDefinition sbd = new ScannedGenericBeanDefinition(metadataReader);
							sbd.setResource(resource);
							sbd.setSource(resource);
							if (isCandidateComponent(sbd)) {
								if (debugEnabled) {
									logger.debug("Identified candidate component class: " + resource);
								}
								candidates.add(sbd);
							}
							else {
								if (debugEnabled) {
									logger.debug("Ignored because not a concrete top-level class: " + resource);
								}
							}
						}
						else {
							if (traceEnabled) {
								logger.trace("Ignored because not matching any filter: " + resource);
							}
						}</code></pre><span> </span>如果存在Componment注解修饰的Class文件则加入到BeanDefinition集合中返回。
<p></p>
<p class="p1"><br /></p>
<p class="p1"><span></span>回到调用扫描bean处</p>
<p class="p1"></p>
<pre><code class="language-html">for (BeanDefinitionHolder holder : scannedBeanDefinitions) {
				if (ConfigurationClassUtils.checkConfigurationClassCandidate(holder.getBeanDefinition(), this.metadataReaderFactory)) {
					parse(holder.getBeanDefinition().getBeanClassName(), holder.getBeanName());
				}
			}</code></pre><br /><span></span>遍历扫描到的bean信息，如果为配置bean，则执行parse方法，该方法调用processConfigurationClass，形成一个递归的操作。
<p></p>
<h2>解析Import注解</h2>
<p class="p1"></p>
<pre><code class="language-html">&lt;span style="font-family:Arial, Helvetica, sans-serif;"&gt; &lt;/span&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;processImports(&lt;/span&gt;&lt;span class="s1" style="font-family: Arial, Helvetica, sans-serif;"&gt;configClass&lt;/span&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;, &lt;/span&gt;&lt;span class="s1" style="font-family: Arial, Helvetica, sans-serif;"&gt;sourceClass&lt;/span&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;, getImports(&lt;/span&gt;&lt;span class="s1" style="font-family: Arial, Helvetica, sans-serif;"&gt;sourceClass&lt;/span&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;), &lt;/span&gt;&lt;span class="s2" style="font-family: Arial, Helvetica, sans-serif;"&gt;true&lt;/span&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;);&lt;/span&gt;</code></pre>
<p></p>
<p class="p1"><span></span>处理import注解，该注解在spring boot中使用非常频繁</p>
<p class="p1"></p>
<pre><code class="language-html">private void processImports(ConfigurationClass configClass, SourceClass currentSourceClass,
			Collection&lt;SourceClass&gt; importCandidates, boolean checkForCircularImports) throws IOException {

		 ...
		 
			this.importStack.push(configClass);
			try {
				for (SourceClass candidate : importCandidates) {
					if (candidate.isAssignable(ImportSelector.class)) {
						// Candidate class is an ImportSelector -&gt; delegate to it to determine imports
						Class&lt;?&gt; candidateClass = candidate.loadClass();
						ImportSelector selector = BeanUtils.instantiateClass(candidateClass, ImportSelector.class);
						invokeAwareMethods(selector);
						if (this.deferredImportSelectors != null &amp;&amp; selector instanceof DeferredImportSelector) {
							this.deferredImportSelectors.add(
									new DeferredImportSelectorHolder(configClass, (DeferredImportSelector) selector));
						}
						else {
							String[] importClassNames = selector.selectImports(currentSourceClass.getMetadata());
							Collection&lt;SourceClass&gt; importSourceClasses = asSourceClasses(importClassNames);
							processImports(configClass, currentSourceClass, importSourceClasses, false);
						}
					}
					else if (candidate.isAssignable(ImportBeanDefinitionRegistrar.class)) {
						// Candidate class is an ImportBeanDefinitionRegistrar -&gt;
						// delegate to it to register additional bean definitions
						Class&lt;?&gt; candidateClass = candidate.loadClass();
						ImportBeanDefinitionRegistrar registrar =
								BeanUtils.instantiateClass(candidateClass, ImportBeanDefinitionRegistrar.class);
						invokeAwareMethods(registrar);
						configClass.addImportBeanDefinitionRegistrar(registrar, currentSourceClass.getMetadata());
					}
					else {
						// Candidate class not an ImportSelector or ImportBeanDefinitionRegistrar -&gt;
						// process it as an @Configuration class
						this.importStack.registerImport(
								currentSourceClass.getMetadata(), candidate.getMetadata().getClassName());
						processConfigurationClass(candidate.asConfigClass(configClass));
					}
				}
			}
			catch (BeanDefinitionStoreException ex) {
				throw ex;
			}
			catch (Exception ex) {
				throw new BeanDefinitionStoreException("Failed to process import candidates for configuration class [" +
						configClass.getMetadata().getClassName() + "]", ex);
			}
			finally {
				this.importStack.pop();
			}
		}
	}</code></pre><span> </span>如果Import注解中Class为ImportSelector子类，通过invokeAwareMethods(<span class="s1">selector</span>)设置aware值，如果类型为DeferredImportSelector则添加到deferredImportSelectors集合中，待前面的<span>parser</span><span class="s1">.parse(</span><span>configCandidates</span><span class="s1">)</span>
<p></p>
<p class="p1">方法中processDeferredImportSelectors()处理；如果不是，则执行selectImports方法，将获取到的结果递归调用processImports，解析selectImports得到的结果</p>
<p class="p1"><span></span>如果Import注解中Class为ImportBeanDefinitionRegistrar子类，则添加到importBeanDefinitionRegistrars中，注意该部分的数据在执行完parser<span class="s1">.parse(</span>configCandidates<span class="s1">)后调用</span><span class="s1">this</span>.<span class="s2">reader</span>.loadBeanDefinitions(<span class="s3">configClasses</span>)解析</p>
<p class="p1"><span></span>否则执行配置信息的解析操作。</p>
<p class="p1"><br /></p>
<h3>解析ImportResource注解</h3>
<p class="p1"></p>
<pre><code class="language-html">// Process any @ImportResource annotations
		if (sourceClass.getMetadata().isAnnotated(ImportResource.class.getName())) {
			AnnotationAttributes importResource = AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(), ImportResource.class);
			String[] resources = importResource.getStringArray("value");
			Class&lt;? extends BeanDefinitionReader&gt; readerClass = importResource.getClass("reader");
			for (String resource : resources) {
				String resolvedResource = this.environment.resolveRequiredPlaceholders(resource);
				configClass.addImportedResource(resolvedResource, readerClass);
			}
		}
</code></pre><br /><span></span>
<p></p>
<h2>解析Bean注解</h2>
<p class="p1"></p>
<pre><code class="language-html">Set&lt;MethodMetadata&gt; beanMethods = sourceClass.getMetadata().getAnnotatedMethods(Bean.class.getName());
		for (MethodMetadata methodMetadata : beanMethods) {
			configClass.addBeanMethod(new BeanMethod(methodMetadata, configClass));
		}</code></pre><br /><br /><p></p>
<p class="p1"><span></span>上面这两个注解相对来讲要简单一些，至此bean的解析完成，这里面涉及到多重递归，首先理清楚一条线才能把代码看明白。</p>
<p class="p1"><br /></p>
<p class="p1"><br /></p>
<p class="p1">转载请注明 <br />
http://blog.csdn.net/liaokailin/article/details/49107209<br /></p>
<h1>欢迎关注，您的肯定是对我最大的支持</h1>
<p><img src="https://img-blog.csdn.net/20170226170131304" alt="" /></p>
<p class="p1"><span></span></p>
<p class="p1"><br /></p>
<p class="p1"><br /></p>
<p class="p1"><span></span></p>
<p class="p1"><br /><br /><br /></p>
<p class="p1"><span><br /><br /><span></span><br /></span><br /></p>
<p class="p1"><br /></p>
<p class="p1"><br /></p>
<p class="p1"><br /></p>
<p class="p1"><span class="s1"><br /></span></p>
<br /><br /></div>
<div><br /></div>
<div><br /></div>
<div><br /></div>
<div><br /></div>
<div><br /></div>
<div><br /></div>
<div><br /></div>
<div><br /></div>
<div><br /></div>
<div><br /></div>
<div><br /></div>
<div><br /></div>
<div><br /></div>
<div><br /></div>
<div><br /></div>
<div><br /></div>
<div><br /></div>
<div><br /></div>
<div><br /></div>
<div><br /></div>
            </div>
                </div>
	</article>
</div>
  <div class="hide-article-box hide-article-pos text-center">
    <div class="border"></div>
        <a class="btn article-footer-btn" id="btn-readmore" data-track-view='{"mod":"popu_376","con":",https://blog.csdn.net/liaokailin/article/details/49107209,"}' data-track-click='{"mod":"popu_376","con":",https://blog.csdn.net/liaokailin/article/details/49107209,"}'>阅读更多</a>
        <a class="btn article-footer-btn article-footer-bookmark-btn" >
      <svg class="icon no-active hover-hide" aria-hidden="true">
        <use xlink:href="#csdnc-bookmark"></use>
      </svg>
      <span>收藏</span>
    </a>
    <div class="btn article-footer-btn  bds_weixin article-footer-share-btn" data-cmd="weixin" title="分享">
      <svg class="icon no-active hover-hide" aria-hidden="true">
        <use xlink:href="#csdnc-share"></use>
      </svg>
      <span>分享</span>
      <div class="bdsharebuttonbox">
        <a href="#"class="bds_weixin clear-share-style-article-footer" data-cmd="weixin" title="分享"></a>
      </div>
    </div>
    
  </div>
  <script>
  (function(){
    function collection(){
      if (currentUserName) {
        var markObj = {};
            markObj.imgUrl ='https://csdnimg.cn/release/phoenix/static_blog/images/appqr.png';
        var markPrompt = (new window.csdn.publicPrompt).init(markObj);
        var maeked = '您已经收藏过';
        if (!$(this).hasClass("liked")) {
          $.ajax({
            url: 'https://my.csdn.net/my/favorite/do_add/2',
            dataType: 'json',
            type: 'POST',
            xhrFields: {
              withCredentials: true
            },
            data: {
              title: articleTit,
              url: curentUrl,
              share: 1,
              map_name: ''
            },
            success: function(data) {
              
              if (data.succ == 1) {
                $('.btn-bookmark').addClass("liked");
                $('.article-footer-bookmark-btn').addClass("liked").children('span').text('已收藏');
                markPrompt.show({})
                // alert('收藏成功,可以在个人中心查看我的收藏');
              } else {
                if (data.msg === "您已经收藏过") {
                  $('.btn-bookmark').addClass("liked");
                  $('.article-footer-bookmark-btn').addClass("liked").children('span').text('已收藏');
                  markPrompt.show({
                    titleStr: maeked
                  })
                }else{
                  alert(data.msg);
                  
                }
              }
            }
          });
        } else {
          markPrompt.show({
            titleStr: maeked
          })
        }
      } else {
        window.csdn.loginBox.show();
      }
    }
    window.csdn = window.csdn ? window.csdn : {};
    window.csdn.articleCollection = collection;
    function setArticleH(btnReadmore,posi){
      var winH = $(window).height();
      var articleBox = $("div.article_content");
      var artH = articleBox.height();
      if(artH > winH*posi){
        articleBox.css({
          'height':winH*posi+'px',
          'overflow':'hidden'
        })
        btnReadmore.click(function(){
          articleBox.removeAttr("style");
          $(this).parent().remove()
        })
      }else{
        btnReadmore.parent().remove()
      }
    }
    var btnReadmore = $("#btn-readmore");
    $('.article-footer-bookmark-btn').click(window.csdn.articleCollection)
    if(btnReadmore.length>0){
      if(currentUserName){
        setArticleH(btnReadmore,3);
      }else{
        setArticleH(btnReadmore,1.2);
      }
    }else{
      $('.hide-article-box').addClass('hide-article-style');
    }
  })()
</script>
<script>
		$(".MathJax").remove();
		if($('div.markdown_views pre.prettyprint code.hljs').length > 0 ){
				$('div.markdown_views')[0].className = 'markdown_views';
		}
</script>
        <div id="dmp_ad_58"><div id="kp_box_58" data-pid="58" data-track-view='{"mod":"kp_popu_58-402","con":",,"}' data-track-click='{"mod":"kp_popu_58-402","con":",,"}'><div style="width:100%;background:#fff;border:3px solid #fff;">
<script type="text/javascript" src="//static.mediav.com/js/mvf_news_feed.js"></script>
<div id="three_ad1" class="mediav_ad" ></div>
<script>
                                               NEWS_FEED({
                w: 900,
                h : 100,
                showid : 'ztvJV8',
                placeholderId: "three_ad1",
                inject : 'define',
                define : {
                    imagePosition : 'left',
                    imageBorderRadius : 0,
                    imageWidth: 90,
                    imageHeight: 68,
                    imageFill : 'clip',
                    displayImage : true,
                    displayTitle : true,
                    titleFontSize: 18,
                    titleFontColor: '#000',
                    titleFontFamily : 'Lato,-apple-system,SF UI Text,Arial,PingFang SC,Hiragino Sans GB,Microsoft YaHei,WenQuanYi Micro Hei,sans-serif',
                    titleFontWeight: 'bold',
                    titlePaddingTop : 0,
                    titlePaddingRight : 0,
                    titlePaddingBottom : 5,
                    titlePaddingLeft : 16,
                    displayDesc : true,
                    descFontSize: 14,
                    descFontColor: '#8e959a',
                    descFontFamily : 'Microsoft YaHei',
                    paddingTop : 20,
                    paddingRight : 0,
                    paddingBottom : 0,
                    paddingLeft : 20,
                    backgroundColor: '#fff',
                    hoverColor: '#000'
                      }
                  })
                                        </script>
</div></div></div>        <a id="commentBox"></a>
<div class="comment-box">
	
	<div class="comment-edit-box d-flex">
		<a id="commentsedit"></a>
		<div class="user-img">
			<a href="javascript:void(0);" target="_blank">
				<img class="show_loginbox" src="//g.csdnimg.cn/static/user-img/anonymous-User-img.png">
			</a>
		</div>
		<form id="commentform">
			<input type="hidden" id="comment_replyId">
			<textarea class="comment-content" name="comment_content" id="comment_content" placeholder="想对作者说点什么"></textarea>
			<div class="opt-box"> <!-- d-flex -->
				<div id="ubbtools" class="add_code">
					<a href="#insertcode" code="code" target="_self"><i class="icon iconfont icon-daima"></i></a>
				</div>
				<input type="hidden" id="comment_replyId" name="comment_replyId">
				<input type="hidden" id="article_id" name="article_id" value="49107209">
				<input type="hidden" id="comment_userId" name="comment_userId" value="">
				<input type="hidden" id="commentId" name="commentId" value="">
				<div style="display: none;" class="csdn-tracking-statistics tracking-click" data-mod="popu_384"><a href="#" target="_blank" class="comment_area_btn">发表评论</a></div>
				<div class="dropdown" id="myDrap">
					<a class="dropdown-face d-flex align-items-center" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
					<div class="txt-selected text-truncate">添加代码片</div>
					<svg class="icon d-block" aria-hidden="true">
						<use xlink:href="#csdnc-triangledown"></use>
					</svg>
					</a>
					<ul class="dropdown-menu" id="commentCode" aria-labelledby="drop4">
						<li><a data-code="html">HTML/XML</a></li>
						<li><a data-code="objc">objective-c</a></li>
						<li><a data-code="ruby">Ruby</a></li>
						<li><a data-code="php">PHP</a></li>
						<li><a data-code="csharp">C</a></li>
						<li><a data-code="cpp">C++</a></li>
						<li><a data-code="javascript">JavaScript</a></li>
						<li><a data-code="python">Python</a></li>
						<li><a data-code="java">Java</a></li>
						<li><a data-code="css">CSS</a></li>
						<li><a data-code="sql">SQL</a></li>
						<li><a data-code="plain">其它</a></li>
					</ul>
				</div>  
				<div class="right-box">
					<span id="tip_comment" class="tip">还能输入<em>1000</em>个字符</span>
					<input type="submit" class="btn btn-sm btn-red btn-comment" value="发表评论">
				</div>
			</div>
		</form>
	</div>

		<div class="comment-list-container">
		<a id="comments"></a>
		<div class="comment-list-box">
		</div>
		<div id="commentPage" class="pagination-box d-none"></div>
		<div class="opt-box text-center">
			<button class="btn btn-sm btn-link-blue" id="btnMoreComment"></button>
		</div>
	</div>
</div>
        <div class="recommend-box">
            		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/u012930316/article/details/79578006,BlogCommendFromBaidu_0"}'>
			<div class="content">
				<a href="https://blog.csdn.net/u012930316/article/details/79578006" target="_blank" title="springcloud 入门第一坑[org.springframework.beans.factory.BeanDefinitionStoreException: Failed to process]">
				<h4 class="text-truncate oneline">
						<em>spring</em>cloud 入门第一坑[org.<em>spring</em>framework.<em>bean</em>s.factory.<em>Bean</em>DefinitionStoreException: Failed to process]				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">03-16</span>
						<span class="read-num hover-hide">
              阅读数 
							7597</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/u012930316/article/details/79578006" target="_blank" title="springcloud 入门第一坑[org.springframework.beans.factory.BeanDefinitionStoreException: Failed to process]">
							<span class="desc oneline">springcloud需要和springboot搭配使用,而其中,对于初学者来说,版本的搭配是相对关键.通常网上的教程都会有相应的版本搭配,而我因为已经是用了springboot1.5.10所以,只能...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/u012930316">来自：	<span class="blog_title"> 欧神的博客</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/u010994966/article/details/78216775,BlogCommendFromBaidu_1"}'>
			<div class="content">
				<a href="https://blog.csdn.net/u010994966/article/details/78216775" target="_blank" title="Sping Cloud Eureka 报错">
				<h4 class="text-truncate oneline">
						Sping Cloud Eureka 报错				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">10-12</span>
						<span class="read-num hover-hide">
              阅读数 
							2044</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/u010994966/article/details/78216775" target="_blank" title="Sping Cloud Eureka 报错">
							<span class="desc oneline">Failedtointrospectannotatedmethodsonclassorg.springframework.cloud.netflix.eureka.server.EurekaServe...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/u010994966">来自：	<span class="blog_title"> 有梦就有马</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/qq_18416057/article/details/81775237,BlogCommendFromBaidu_2"}'>
			<div class="content">
				<a href="https://blog.csdn.net/qq_18416057/article/details/81775237" target="_blank" title="spring boot 自动配置功能解剖">
				<h4 class="text-truncate oneline">
						<em>spring</em> <em>boot</em> 自动配置功能解剖				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">08-22</span>
						<span class="read-num hover-hide">
              阅读数 
							196</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/qq_18416057/article/details/81775237" target="_blank" title="spring boot 自动配置功能解剖">
							<span class="desc oneline">  说起springboot和spring的区别，大家第一反应就是springboot少了很多配置，但不是说少了很多配置很多功能就没有了，或者比spring就少了很多功能，而是springboot自己...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/qq_18416057">来自：	<span class="blog_title"> it帝国的博客-辉</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    <div class="recommend-item-box recommend-ad-box"><div id="kp_box_59" data-pid="59" data-track-view='{"mod":"kp_popu_59-517","con":",,"}' data-track-click='{"mod":"kp_popu_59-517","con":",,"}'><div id="three_ad1" class="mediav_ad" ></div>
<script type="text/javascript" src="//static.mediav.com/js/mvf_news_feed.js"></script>
<script>
                                               NEWS_FEED({
                w: 852,
                h : 52,
                showid : 'GNKXx7',
                placeholderId: "three_ad1",
                inject : 'define',
                define : {
                    imagePosition : 'left',
                    imageBorderRadius : 3,
                    imageWidth: 90,
                    imageHeight: 52,
                    imageFill : 'clip',
                    displayImage : true,
                    displayTitle : true,
                    titleFontSize: 18,
                    titleFontColor: '#000',
                    titleFontFamily : 'Lato,-apple-system,SF UI Text,Arial,PingFang SC,Hiragino Sans GB,Microsoft YaHei,WenQuanYi Micro Hei,sans-serif',
                    titleFontWeight: 'bold',
                    titlePaddingTop : 0,
                    titlePaddingRight : 0,
                    titlePaddingBottom : 5,
                    titlePaddingLeft : 16,
                    displayDesc : true,
                    descFontSize: 14,
                    descFontColor: '#8e959a',
                    descFontFamily : 'Microsoft Yahei',
                    paddingTop : 0,
                    paddingRight : 0,
                    paddingBottom : 0,
                    paddingLeft : 0,
                    backgroundColor: '#fff',
                    hoverColor: '#000'
                      }
                  })
                                        </script></div></div>
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/yexiaomodemo/article/details/79539059,BlogCommendFromBaidu_3"}'>
			<div class="content">
				<a href="https://blog.csdn.net/yexiaomodemo/article/details/79539059" target="_blank" title="springcloud启动eureka报错java.lang.ClassNotFoundException: com.sun.jersey.api.core.DefaultResourceConfig">
				<h4 class="text-truncate oneline">
						<em>spring</em>cloud启动eureka报错java.lang.ClassNotFoundException: com.sun.jersey.api.core.DefaultResourceConfig				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">03-13</span>
						<span class="read-num hover-hide">
              阅读数 
							8万+</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/yexiaomodemo/article/details/79539059" target="_blank" title="springcloud启动eureka报错java.lang.ClassNotFoundException: com.sun.jersey.api.core.DefaultResourceConfig">
							<span class="desc oneline">最近开始学习springcloud,因为钱不久使用过springboot，所以轻松上手。然后弄清楚我们的消费者服务者服务发现者，然后就跟着教程走起来，然后就悲剧的出现如下的一幕换了四五个版本的clou...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/yexiaomodemo">来自：	<span class="blog_title"> yexiaomodemo的专栏</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/haoxiaoyong1014/article/details/79282401,BlogCommendFromBaidu_4"}'>
			<div class="content">
				<a href="https://blog.csdn.net/haoxiaoyong1014/article/details/79282401" target="_blank" title="学习 spring cloud 时错误笔记">
				<h4 class="text-truncate oneline">
						学习 <em>spring</em> cloud 时错误笔记				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">02-07</span>
						<span class="read-num hover-hide">
              阅读数 
							1070</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/haoxiaoyong1014/article/details/79282401" target="_blank" title="学习 spring cloud 时错误笔记">
							<span class="desc oneline">最近在慢慢学习cloud的相关知识，会把碰见的一些问题记录下来。对照学习的参考链接：【程序猿DD】SpringCloud构建微服务架构系列，持续更新~](http://bbs.springcloud....</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/haoxiaoyong1014">来自：	<span class="blog_title"> haoxiaoyong1014的博客</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/mx5721/article/details/79134805,BlogCommendFromBaidu_5"}'>
			<div class="content">
				<a href="https://blog.csdn.net/mx5721/article/details/79134805" target="_blank" title="搭建eureka server 报错">
				<h4 class="text-truncate oneline">
						搭建eureka server 报错				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">01-22</span>
						<span class="read-num hover-hide">
              阅读数 
							3939</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/mx5721/article/details/79134805" target="_blank" title="搭建eureka server 报错">
							<span class="desc oneline">配置如下：</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/mx5721">来自：	<span class="blog_title"> mx5721的专栏</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/haoxiaoyong1014/article/details/79391784,BlogCommendFromBaidu_6"}'>
			<div class="content">
				<a href="https://blog.csdn.net/haoxiaoyong1014/article/details/79391784" target="_blank" title="Application startup failed    Failed to introspect annotated methods on class">
				<h4 class="text-truncate oneline">
						Application startup failed    Failed to introspect annotated methods on class				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">02-27</span>
						<span class="read-num hover-hide">
              阅读数 
							5885</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/haoxiaoyong1014/article/details/79391784" target="_blank" title="Application startup failed    Failed to introspect annotated methods on class">
							<span class="desc oneline">遇到这样的异常2018-02-0715:40:43.458ERROR21630—[restartedMain]o.s.boot.SpringApplication:Applicationstartup...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/haoxiaoyong1014">来自：	<span class="blog_title"> haoxiaoyong1014的博客</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/andy_zhang2007/article/details/78549773,BlogCommendFromBaidu_7"}'>
			<div class="content">
				<a href="https://blog.csdn.net/andy_zhang2007/article/details/78549773" target="_blank" title="Spring 工具类 ConfigurationClassParser 分析得到配置类">
				<h4 class="text-truncate oneline">
						<em>Spring</em> 工具类 ConfigurationClassParser 分析得到配置类				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">11-16</span>
						<span class="read-num hover-hide">
              阅读数 
							2091</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/andy_zhang2007/article/details/78549773" target="_blank" title="Spring 工具类 ConfigurationClassParser 分析得到配置类">
							<span class="desc oneline">简介Spring的工具类ConfigurationClassParser用于分析一个@Configuration注解的类，产生一组ConfigurationClass对象。其分析过程主要是递归分析注解...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/andy_zhang2007">来自：	<span class="blog_title"> 冰山*消融*春游记</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    <div class="recommend-item-box recommend-ad-box"><div id="kp_box_60" data-pid="60" data-track-view='{"mod":"kp_popu_60-43","con":",,"}' data-track-click='{"mod":"kp_popu_60-43","con":",,"}'><div id="three_ad8" class="mediav_ad" ></div>
<script type="text/javascript" src="//static.mediav.com/js/mvf_news_feed.js"></script>
<script>
                                               NEWS_FEED({
                w: 900,
                h : 84,
                showid : 'Afihld',
                placeholderId: "three_ad8",
                inject : 'define',
                define : {
                    imagePosition : 'left',
                    imageBorderRadius : 3,
                    imageWidth: 90,
                    imageHeight: 60,
                    imageFill : 'clip',
                    displayImage : true,
                    displayTitle : true,
                    titleFontSize: 18,
                    titleFontColor: '#000',
                    titleFontFamily : 'Lato,-apple-system,SF UI Text,Arial,PingFang SC,Hiragino Sans GB,Microsoft YaHei,WenQuanYi Micro Hei,sans-serif',
                    titleFontWeight: 'bold',
                    titlePaddingTop : 0,
                    titlePaddingRight : 0,
                    titlePaddingBottom : 5,
                    titlePaddingLeft : 16,
                    displayDesc : true,
                    descFontSize: 14,
                    descFontColor: '#8e959a',
                    descFontFamily : 'Microsoft Yahei',
                    paddingTop : 10,
                    paddingRight : 0,
                    paddingBottom : 0,
                    paddingLeft : 0,
                    backgroundColor: '#fff',
                    hoverColor: '#000'
                      }
                  })
                                        </script></div></div>
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/hh652400660/article/details/79391408,BlogCommendFromBaidu_8"}'>
			<div class="content">
				<a href="https://blog.csdn.net/hh652400660/article/details/79391408" target="_blank" title="META-INF/spring.factories中找不到自动配置类，No auto configuration classes found in META-INF/spring.factories.">
				<h4 class="text-truncate oneline">
						META-INF/<em>spring</em>.factories中找不到自动配置类，No auto configuration classes found in META-INF/<em>spring</em>.factories.				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">02-27</span>
						<span class="read-num hover-hide">
              阅读数 
							8095</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/hh652400660/article/details/79391408" target="_blank" title="META-INF/spring.factories中找不到自动配置类，No auto configuration classes found in META-INF/spring.factories.">
							<span class="desc oneline">ERRORorg.springframework.boot.SpringApplication-Applicationstartupfailedorg.springframework.beans.fa...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/hh652400660">来自：	<span class="blog_title"> 黄惠（IOT物联网）的专栏</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/weixin_34290390/article/details/86003549,BlogCommendESEnWordWeight_9"}'>
			<div class="content">
				<a href="https://blog.csdn.net/weixin_34290390/article/details/86003549" target="_blank" title="Failed to process import candidates for configuration class [com.simple.....]">
				<h4 class="text-truncate oneline">
						Failed to process import candidates for configuration class [com.simple.....]				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">07-21</span>
						<span class="read-num hover-hide">
              阅读数 
							38</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/weixin_34290390/article/details/86003549" target="_blank" title="Failed to process import candidates for configuration class [com.simple.....]">
							<span class="desc oneline">主要原因：是因为自己定制的starter在打包时（package)用了spring-boot-maven-plugin,即在你的定制starter工程的pom.xml中有如下配置：&amp;amp;lt;bu...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/weixin_34290390">来自：	<span class="blog_title"> weixin_34290390的博客</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
          <div class="recommend-item-box blog-expert-recommend-box">
				<div class="d-flex">
					<div class="blog-expert-recommend">
						<div class="blog-expert">
							<div class="blog-expert-flexbox"></div>
						</div>
					</div>
				</div>
      </div>
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/qq_34874784/article/details/83744355,BlogCommendESEnWordWeight_10"}'>
			<div class="content">
				<a href="https://blog.csdn.net/qq_34874784/article/details/83744355" target="_blank" title="springboot activiti 报错cannot be opened because it does not exist">
				<h4 class="text-truncate oneline">
						<em>spring</em><em>boot</em> activiti 报错cannot be opened because it does not exist				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">11-05</span>
						<span class="read-num hover-hide">
              阅读数 
							144</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/qq_34874784/article/details/83744355" target="_blank" title="springboot activiti 报错cannot be opened because it does not exist">
							<span class="desc oneline">Failedtoprocessimportcandidatesforconfigurationclass[com.example.ActivitiApplication];nestedexceptio...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/qq_34874784">来自：	<span class="blog_title"> qq_34874784的博客</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/majunzhu/article/details/79199752,BlogCommendFromBaidu_11"}'>
			<div class="content">
				<a href="https://blog.csdn.net/majunzhu/article/details/79199752" target="_blank" title="Spring-Boot 加载Bean的几种方式">
				<h4 class="text-truncate oneline">
						<em>Spring</em>-<em>Boot</em> <em>加载</em><em>Bean</em>的几种方式				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">01-29</span>
						<span class="read-num hover-hide">
              阅读数 
							1万+</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/majunzhu/article/details/79199752" target="_blank" title="Spring-Boot 加载Bean的几种方式">
							<span class="desc oneline">Spring从3.0之后，就逐步倾向于使用javacodeconfig方式来进行bean的配置，在spring-boot中，这种风格就更为明显了。在查看spring-boot工程的时候，总是探究一下s...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/majunzhu">来自：	<span class="blog_title"> majunzhu的博客</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/qq_34677587/article/details/68116054,BlogCommendFromBaidu_12"}'>
			<div class="content">
				<a href="https://blog.csdn.net/qq_34677587/article/details/68116054" target="_blank" title="spring boot 学习(三) — 依赖注入 @Bean">
				<h4 class="text-truncate oneline">
						<em>spring</em> <em>boot</em> 学习(三) — 依赖注入 @<em>Bean</em>				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">03-29</span>
						<span class="read-num hover-hide">
              阅读数 
							3万+</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/qq_34677587/article/details/68116054" target="_blank" title="spring boot 学习(三) — 依赖注入 @Bean">
							<span class="desc oneline">spring4推荐的@Configuration和@bean的用法，这样我们可以省去繁琐的配置文件第一步建一个Maven工程第二部添加依赖 pom.xml...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/qq_34677587">来自：	<span class="blog_title"> 什么样人活什么样的命的博客</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    <div class="recommend-item-box recommend-ad-box"><div id="kp_box_61" data-pid="61" data-track-view='{"mod":"kp_popu_61-557","con":",,"}' data-track-click='{"mod":"kp_popu_61-557","con":",,"}'><div id="three_ad13" class="mediav_ad" ></div>
<script type="text/javascript" src="//static.mediav.com/js/mvf_news_feed.js"></script>
<script>
                                               NEWS_FEED({
                w: 852,
                h : 60,
                showid : 'GNKXx7',
                placeholderId: "three_ad13",
                inject : 'define',
                define : {
                    imagePosition : 'left',
                    imageBorderRadius : 3,
                    imageWidth: 90,
                    imageHeight: 60,
                    imageFill : 'clip',
                    displayImage : true,
                    displayTitle : true,
                    titleFontSize: 18,
                    titleFontColor: '#000',
                    titleFontFamily : 'Lato,-apple-system,SF UI Text,Arial,PingFang SC,Hiragino Sans GB,Microsoft YaHei,WenQuanYi Micro Hei,sans-serif',
                    titleFontWeight: 'bold',
                    titlePaddingTop : 0,
                    titlePaddingRight : 0,
                    titlePaddingBottom : 5,
                    titlePaddingLeft : 16,
                    displayDesc : true,
                    descFontSize: 14,
                    descFontColor: '#8e959a',
                    descFontFamily : 'Microsoft Yahei',
                    paddingTop : 0,
                    paddingRight : 0,
                    paddingBottom : 0,
                    paddingLeft : 0,
                    backgroundColor: '#fff',
                    hoverColor: '#000'
                      }
                  })
                                        </script></div></div>
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/elim168/article/details/78056446,BlogCommendFromBaidu_13"}'>
			<div class="content">
				<a href="https://blog.csdn.net/elim168/article/details/78056446" target="_blank" title="Spring（24）——自定义BeanDefinitionRegistryPostProcessor">
				<h4 class="text-truncate oneline">
						<em>Spring</em>（24）——自定义<em>Bean</em>DefinitionRegistryPostProcessor				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">09-21</span>
						<span class="read-num hover-hide">
              阅读数 
							9531</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/elim168/article/details/78056446" target="_blank" title="Spring（24）——自定义BeanDefinitionRegistryPostProcessor">
							<span class="desc oneline">24自定义BeanDefinitionRegistryPostProcessorBeanDefinitionRegistryPostProcessor继承自BeanFactoryPostProcess...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/elim168">来自：	<span class="blog_title"> Elim的博客</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/cuixuefeng1112/article/details/45556137,BlogCommendFromBaidu_14"}'>
			<div class="content">
				<a href="https://blog.csdn.net/cuixuefeng1112/article/details/45556137" target="_blank" title="spring加载顺序">
				<h4 class="text-truncate oneline">
						<em>spring</em><em>加载</em>顺序				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">05-07</span>
						<span class="read-num hover-hide">
              阅读数 
							5051</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/cuixuefeng1112/article/details/45556137" target="_blank" title="spring加载顺序">
							<span class="desc oneline">因为项目需求，要实现自定义注解然后通过spring扫描注解并放入缓存，我想到了BeanDefinitionRegistryPostProcessor接口，通过实现 BeanDefinitionRegi...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/cuixuefeng1112">来自：	<span class="blog_title"> cuixuefeng1112的专栏</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/u012437781/article/details/78626134,BlogCommendFromBaidu_15"}'>
			<div class="content">
				<a href="https://blog.csdn.net/u012437781/article/details/78626134" target="_blank" title="SpringBoot构建微服务实战 之 @Import">
				<h4 class="text-truncate oneline">
						<em>Spring</em><em>Boot</em>构建微服务<em>实战</em> 之 @Import				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">11-24</span>
						<span class="read-num hover-hide">
              阅读数 
							8677</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/u012437781/article/details/78626134" target="_blank" title="SpringBoot构建微服务实战 之 @Import">
							<span class="desc oneline">SpringBoot构建微服务实战之@ImportSpringBoot的@Import用于将指定的类实例注入之SpringIOCContainer中。SpringBoot提供了三种使用@Import将...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/u012437781">来自：	<span class="blog_title"> Dusty丶one的博客</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/qq_30908729/article/details/82315363,searchFromBaidu_16"}'>
			<div class="content">
				<a href="https://blog.csdn.net/qq_30908729/article/details/82315363" target="_blank" title="Failed to introspect annotated methods on class org.springframework.cloud.netflix.zuul.ZuulConfigura">
				<h4 class="text-truncate oneline">
						Failed to introspect annotated methods on class org.<em>spring</em>framework.cloud.netflix.zuul.ZuulConfigura				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">09-02</span>
						<span class="read-num hover-hide">
              阅读数 
							434</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/qq_30908729/article/details/82315363" target="_blank" title="Failed to introspect annotated methods on class org.springframework.cloud.netflix.zuul.ZuulConfigura">
							<span class="desc oneline">org.springframework.beans.factory.BeanDefinitionStoreException: Failed to process import candidates ...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/qq_30908729">来自：	<span class="blog_title"> qq_30908729的博客</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/m0_38075425/article/details/81123689,BlogCommendFromGuangxin_17"}'>
			<div class="content">
				<a href="https://blog.csdn.net/m0_38075425/article/details/81123689" target="_blank" title="spring boot入门（七） springboot的拦截器Interceptor。最完整、简单易懂、详细的spring boot教程。">
				<h4 class="text-truncate oneline">
						<em>spring</em> <em>boot</em>入门（七） <em>spring</em><em>boot</em>的拦截器Interceptor。最完整、简单易懂、详细的<em>spring</em> <em>boot</em>教程。				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">07-19</span>
						<span class="read-num hover-hide">
              阅读数 
							2850</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/m0_38075425/article/details/81123689" target="_blank" title="spring boot入门（七） springboot的拦截器Interceptor。最完整、简单易懂、详细的spring boot教程。">
							<span class="desc oneline">很多同学搞不懂拦截器和过滤器的区别，我们先说一下他们的区别：过滤器和拦截器非常相似，但是它们有很大的区别	最简单明了的区别就是过滤器可以修改request，而拦截器不能	过滤器需要在servlet容器...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/m0_38075425">来自：	<span class="blog_title"> 梦的天空一片蓝</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    <div class="recommend-item-box recommend-ad-box"><div id="kp_box_62" data-pid="62" data-track-view='{"mod":"kp_popu_62-556","con":",,"}' data-track-click='{"mod":"kp_popu_62-556","con":",,"}'><div id="three_ad18" class="mediav_ad" ></div>
<script type="text/javascript" src="//static.mediav.com/js/mvf_news_feed.js"></script>
<script>
                                               NEWS_FEED({
                w: 852,
                h : 60,
                showid : 'Afihld',
                placeholderId: "three_ad18",
                inject : 'define',
                define : {
                    imagePosition : 'left',
                    imageBorderRadius : 3,
                    imageWidth: 90,
                    imageHeight: 60,
                    imageFill : 'clip',
                    displayImage : true,
                    displayTitle : true,
                    titleFontSize: 18,
                    titleFontColor: '#000',
                    titleFontFamily : 'Lato,-apple-system,SF UI Text,Arial,PingFang SC,Hiragino Sans GB,Microsoft YaHei,WenQuanYi Micro Hei,sans-serif',
                    titleFontWeight: 'bold',
                    titlePaddingTop : 0,
                    titlePaddingRight : 0,
                    titlePaddingBottom : 5,
                    titlePaddingLeft : 16,
                    displayDesc : true,
                    descFontSize: 14,
                    descFontColor: '#8e959a',
                    descFontFamily : 'Microsoft Yahei',
                    paddingTop : 0,
                    paddingRight : 0,
                    paddingBottom : 0,
                    paddingLeft : 0,
                    backgroundColor: '#fff',
                    hoverColor: '#000'
                      }
                  })
                                        </script></div></div>
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/m0_38075425/article/details/81164501,BlogCommendFromGuangxin_18"}'>
			<div class="content">
				<a href="https://blog.csdn.net/m0_38075425/article/details/81164501" target="_blank" title="spring boot入门（八） springboot的监听器Listener。最完整、简单易懂、详细的spring boot教程。">
				<h4 class="text-truncate oneline">
						<em>spring</em> <em>boot</em>入门（八） <em>spring</em><em>boot</em>的监听器Listener。最完整、简单易懂、详细的<em>spring</em> <em>boot</em>教程。				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">07-23</span>
						<span class="read-num hover-hide">
              阅读数 
							6039</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/m0_38075425/article/details/81164501" target="_blank" title="spring boot入门（八） springboot的监听器Listener。最完整、简单易懂、详细的spring boot教程。">
							<span class="desc oneline">   监听器是一个专门用于对其他对象身上发生的事件或状态改变进行监听和相应处理的对象，当被监视的对象发生情况时，立即采取相应的行动。通俗的讲，监听器就比如你盯着一盘好吃的，有人拿你的吃的的时候，你会立...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/m0_38075425">来自：	<span class="blog_title"> 梦的天空一片蓝</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/m0_38044453/article/details/82180480,BlogCommendFromGuangxin_19"}'>
			<div class="content">
				<a href="https://blog.csdn.net/m0_38044453/article/details/82180480" target="_blank" title="spring boot中全局设置时间格式">
				<h4 class="text-truncate oneline">
						<em>spring</em> <em>boot</em>中全局设置时间格式				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">08-29</span>
						<span class="read-num hover-hide">
              阅读数 
							2051</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/m0_38044453/article/details/82180480" target="_blank" title="spring boot中全局设置时间格式">
							<span class="desc oneline">在yml或者properties文件中设置，这里用的是ymlspring:jackson:date-format:yyyy-MM-dd#如果使用字符串表示，用这行设置格式timezone:GMT+8s...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/m0_38044453">来自：	<span class="blog_title"> 这天有点热的博客</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/gnail_oug/article/details/80324120,BlogCommendFromGuangxin_20"}'>
			<div class="content">
				<a href="https://blog.csdn.net/gnail_oug/article/details/80324120" target="_blank" title="Spring Boot教程(十三)：Spring Boot文件上传">
				<h4 class="text-truncate oneline">
						<em>Spring</em> <em>Boot</em>教程(十三)：<em>Spring</em> <em>Boot</em>文件上传				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">05-15</span>
						<span class="read-num hover-hide">
              阅读数 
							2万+</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/gnail_oug/article/details/80324120" target="_blank" title="Spring Boot教程(十三)：Spring Boot文件上传">
							<span class="desc oneline">一、创建一个简单的包含WEB依赖的SpringBoot项目pom.xml内容：&amp;amp;lt;!--SpringBootweb启动器--&amp;amp;gt;&amp;amp;lt;dependency&amp;amp;g...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/gnail_oug">来自：	<span class="blog_title"> 蝈蝈的博客</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/CSDN_LQR/article/details/77727400,BlogCommendFromGuangxin_21"}'>
			<div class="content">
				<a href="https://blog.csdn.net/CSDN_LQR/article/details/77727400" target="_blank" title="SpringBoot详解（二）-Spring Boot的核心">
				<h4 class="text-truncate oneline">
						<em>Spring</em><em>Boot</em>详解（二）-<em>Spring</em> <em>Boot</em>的核心				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">08-30</span>
						<span class="read-num hover-hide">
              阅读数 
							2884</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/CSDN_LQR/article/details/77727400" target="_blank" title="SpringBoot详解（二）-Spring Boot的核心">
							<span class="desc oneline">SpringBoot的核心在上篇中我们成功运行了一个简单的web应用，其中有一个注解被轻易的带过了，但它在SpringBoot中是最重要的注解，没有之一，它就是@SpringBootApplicati...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/CSDN_LQR">来自：	<span class="blog_title"> CSDN_LQR的博客</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    			<div class="recommend-item-box recommend-box-ident recommend-download-box clearfix"  data-track-click='{"mod":"popu_387","con":",https://download.csdn.net/download/dcxy0/10373642,BlogCommendFromQuerySearch_22"}'>
			<a href="https://download.csdn.net/download/dcxy0/10373642" target="_blank">
				<div class="content clearfix">
					<div class="">
						<h4 class="text-truncate oneline clearfix">
							<em>Spring</em> <em>Boot</em><em>实战</em>						</h4>
						<span class="data float-right">04-25</span>
					</div>
					<div class="desc oneline">
							Spring Boot实战Spring Boot实战Spring Boot实战Spring Boot实战Spring Boot实战Spring Boot实战Spring Boot实战Spring Boot实战Spring Boot实战Sp...					</div>
          <span class="type-show type-show-download">下载</span>
				</div>
			</a>
		</div>
	
    <div class="recommend-item-box recommend-ad-box"><div id="kp_box_63" data-pid="63" data-track-view='{"mod":"kp_popu_63-555","con":",,"}' data-track-click='{"mod":"kp_popu_63-555","con":",,"}'><div id="three_ad23" class="mediav_ad" ></div>
<script type="text/javascript" src="//static.mediav.com/js/mvf_news_feed.js"></script>
<script>
                                               NEWS_FEED({
                w: 852,
                h : 60,
                showid : 'GNKXx7',
                placeholderId: "three_ad23",
                inject : 'define',
                define : {
                    imagePosition : 'left',
                    imageBorderRadius : 3,
                    imageWidth: 90,
                    imageHeight: 60,
                    imageFill : 'clip',
                    displayImage : true,
                    displayTitle : true,
                    titleFontSize: 18,
                    titleFontColor: '#000',
                    titleFontFamily : 'Lato,-apple-system,SF UI Text,Arial,PingFang SC,Hiragino Sans GB,Microsoft YaHei,WenQuanYi Micro Hei,sans-serif',
                    titleFontWeight: 'bold',
                    titlePaddingTop : 0,
                    titlePaddingRight : 0,
                    titlePaddingBottom : 5,
                    titlePaddingLeft : 16,
                    displayDesc : true,
                    descFontSize: 14,
                    descFontColor: '#8e959a',
                    descFontFamily : 'Microsoft Yahei',
                    paddingTop : 0,
                    paddingRight : 0,
                    paddingBottom : 0,
                    paddingLeft : 0,
                    backgroundColor: '#fff',
                    hoverColor: '#000'
                      }
                  })
                                        </script></div></div>
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/Lzy_YY/article/details/82143039,BlogCommendFromQuerySearch_23"}'>
			<div class="content">
				<a href="https://blog.csdn.net/Lzy_YY/article/details/82143039" target="_blank" title="基于spring boot的Bean 的配置与加载过程">
				<h4 class="text-truncate oneline">
						基于<em>spring</em> <em>boot</em>的<em>Bean</em> 的配置与<em>加载</em>过程				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">08-28</span>
						<span class="read-num hover-hide">
              阅读数 
							324</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/Lzy_YY/article/details/82143039" target="_blank" title="基于spring boot的Bean 的配置与加载过程">
							<span class="desc oneline">   好久没写博客了，前几天在项目中用到了在系统启动时候用redis加载数据，我就在思考，启动的时候加载数据，那就应该是配置一个bean，至于spring的bean是单例模式，不在本次的讨论范围之内，...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/Lzy_YY">来自：	<span class="blog_title"> 十一年</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    			<div class="recommend-item-box recommend-box-ident recommend-download-box clearfix"  data-track-click='{"mod":"popu_387","con":",https://download.csdn.net/download/u013276277/10404923,BlogCommendFromQuerySearch_24"}'>
			<a href="https://download.csdn.net/download/u013276277/10404923" target="_blank">
				<div class="content clearfix">
					<div class="">
						<h4 class="text-truncate oneline clearfix">
							《<em>Spring</em> <em>Boot</em><em>实战</em>》源代码						</h4>
						<span class="data float-right">05-10</span>
					</div>
					<div class="desc oneline">
							书籍Spring Boot实战 源代码， Spring Boot实战 源代码 Spring Boot实战 源代码 Spring Boot实战 源代码 Spring Boot实战 源代码 Spring Boot实战 源代码 Spring B...					</div>
          <span class="type-show type-show-download">下载</span>
				</div>
			</a>
		</div>
	
    
    
    			<div class="recommend-item-box recommend-box-ident recommend-download-box clearfix"  data-track-click='{"mod":"popu_387","con":",https://download.csdn.net/download/just_do_it_hzf/10284518,BlogCommendFromQuerySearch_25"}'>
			<a href="https://download.csdn.net/download/just_do_it_hzf/10284518" target="_blank">
				<div class="content clearfix">
					<div class="">
						<h4 class="text-truncate oneline clearfix">
							<em>Spring</em> <em>Boot</em><em>实战</em>（中文版）						</h4>
						<span class="data float-right">03-13</span>
					</div>
					<div class="desc oneline">
							Spring Boot实战（中文版）Spring Boot实战（中文版）Spring Boot实战（中文版）Spring Boot实战（中文版）					</div>
          <span class="type-show type-show-download">下载</span>
				</div>
			</a>
		</div>
	
    
    
    			<div class="recommend-item-box recommend-box-ident recommend-download-box clearfix"  data-track-click='{"mod":"popu_387","con":",https://download.csdn.net/download/xingxing12323/10317367,BlogCommendFromQuerySearch_26"}'>
			<a href="https://download.csdn.net/download/xingxing12323/10317367" target="_blank">
				<div class="content clearfix">
					<div class="">
						<h4 class="text-truncate oneline clearfix">
							<em>Spring</em> <em>Boot</em> <em>实战</em>						</h4>
						<span class="data float-right">03-30</span>
					</div>
					<div class="desc oneline">
							Spring Boot 实战    Spring Boot 实战   Spring Boot 实战  Spring Boot 实战下载					</div>
          <span class="type-show type-show-download">下载</span>
				</div>
			</a>
		</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/dengchenrong/article/details/79361558,BlogCommendFromBaidu_27"}'>
			<div class="content">
				<a href="https://blog.csdn.net/dengchenrong/article/details/79361558" target="_blank" title="SpringCloud Eureka 报错 无法启动问题">
				<h4 class="text-truncate oneline">
						<em>Spring</em>Cloud Eureka 报错 无法启动问题				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">02-24</span>
						<span class="read-num hover-hide">
              阅读数 
							6081</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/dengchenrong/article/details/79361558" target="_blank" title="SpringCloud Eureka 报错 无法启动问题">
							<span class="desc oneline">java.lang.IllegalStateException:ApplicationEventMulticasternotinitialized-call‘refresh’beforemultica...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/dengchenrong">来自：	<span class="blog_title"> 程序人生</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    <div class="recommend-item-box recommend-ad-box"><div id="kp_box_64" data-pid="64" data-track-view='{"mod":"kp_popu_64-81","con":",,"}' data-track-click='{"mod":"kp_popu_64-81","con":",,"}'><div id="three_ad28" class="mediav_ad" ></div>
<script type="text/javascript" src="//static.mediav.com/js/mvf_news_feed.js"></script>
<script>
                                               NEWS_FEED({
                w: 852,
                h : 60,
                showid : 'Afihld',
                placeholderId: "three_ad28",
                inject : 'define',
                define : {
                    imagePosition : 'left',
                    imageBorderRadius : 3,
                    imageWidth: 90,
                    imageHeight: 60,
                    imageFill : 'clip',
                    displayImage : true,
                    displayTitle : true,
                    titleFontSize: 18,
                    titleFontColor: '#000',
                    titleFontFamily : 'Lato,-apple-system,SF UI Text,Arial,PingFang SC,Hiragino Sans GB,Microsoft YaHei,WenQuanYi Micro Hei,sans-serif',
                    titleFontWeight: 'bold',
                    titlePaddingTop : 0,
                    titlePaddingRight : 0,
                    titlePaddingBottom : 5,
                    titlePaddingLeft : 16,
                    displayDesc : true,
                    descFontSize: 14,
                    descFontColor: '#8e959a',
                    descFontFamily : 'Microsoft Yahei',
                    paddingTop : 0,
                    paddingRight : 0,
                    paddingBottom : 0,
                    paddingLeft : 0,
                    backgroundColor: '#fff',
                    hoverColor: '#000'
                      }
                  })
                                        </script></div></div>
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/xujian_2001/article/details/78907990,BlogCommendFromBaidu_28"}'>
			<div class="content">
				<a href="https://blog.csdn.net/xujian_2001/article/details/78907990" target="_blank" title="maven项目转成spring boot项目有两种方式">
				<h4 class="text-truncate oneline">
						maven项目转成<em>spring</em> <em>boot</em>项目有两种方式				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">12-27</span>
						<span class="read-num hover-hide">
              阅读数 
							8647</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/xujian_2001/article/details/78907990" target="_blank" title="maven项目转成spring boot项目有两种方式">
							<span class="desc oneline">maven项目转成springboot项目有两种方式：1、继承方式，pom.xml文件中配置org.springframework.bootspring-boot-starter-parent1.5....</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/xujian_2001">来自：	<span class="blog_title"> 徐建的专栏</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/qq496013218/article/details/73732749,BlogCommendFromBaidu_29"}'>
			<div class="content">
				<a href="https://blog.csdn.net/qq496013218/article/details/73732749" target="_blank" title="Spring Cloud Eureka">
				<h4 class="text-truncate oneline">
						<em>Spring</em> Cloud Eureka				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">06-26</span>
						<span class="read-num hover-hide">
              阅读数 
							5475</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/qq496013218/article/details/73732749" target="_blank" title="Spring Cloud Eureka">
							<span class="desc oneline">java.lang.IllegalStateException:ApplicationEventMulticasternotinitialized-call'refresh'beforemultica...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/qq496013218">来自：	<span class="blog_title"> _William_Cheung的博客</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/u011818420/article/details/80512160,BlogCommendFromBaidu_30"}'>
			<div class="content">
				<a href="https://blog.csdn.net/u011818420/article/details/80512160" target="_blank" title="Springboot 启动时org.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse config">
				<h4 class="text-truncate oneline">
						<em>Spring</em><em>boot</em> 启动时org.<em>spring</em>framework.<em>bean</em>s.factory.<em>Bean</em>DefinitionStoreException: Failed to parse config				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">05-30</span>
						<span class="read-num hover-hide">
              阅读数 
							1322</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/u011818420/article/details/80512160" target="_blank" title="Springboot 启动时org.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse config">
							<span class="desc oneline">springboot项目在Idea部署可以正常运行，但是无论打成jar或者war，启动都会报错，具体错误如下:16:31:16[main]INFO o.s.b.c.e.AnnotationConfig...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/u011818420">来自：	<span class="blog_title"> u011818420的博客</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident recommend-other-item-box"  data-track-click='{"mod":"popu_387","con":",https://bbs.csdn.net/topics/392298534,BlogCommendFromBaidu_31"}'>
		<a href="https://bbs.csdn.net/topics/392298534" target="_blank">
			<h4 class="text-truncate oneline">
					求助！！Java项目启动报错：Failed to parse configuration class			</h4>
			<div class="info-box d-flex align-content-center">
					<span class="date">12-15</span>
			</div>
			<p class="content oneline">
        <span class="desc oneline">Failed to parse configuration class ：未能解析配置类；有知道这个咋么解决的么？求解答！ 现在做的是一个web项目，添加了applicationcontext.xml</span>
                  <span class="type-show type-show-bbs">论坛</span>
        			</p>
		</a>

	</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/liudajiang/article/details/53444451,BlogCommendFromBaidu_32"}'>
			<div class="content">
				<a href="https://blog.csdn.net/liudajiang/article/details/53444451" target="_blank" title="Spring 实现动态注册Bean">
				<h4 class="text-truncate oneline">
						<em>Spring</em> 实现动态注册<em>Bean</em>				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">12-03</span>
						<span class="read-num hover-hide">
              阅读数 
							7858</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/liudajiang/article/details/53444451" target="_blank" title="Spring 实现动态注册Bean">
							<span class="desc oneline">写一个组件，需要依据配置选择DAO实现，比如JPA，Mybatis预期效果为，系统启动时根据配置自动向spring注册相关的组件（比如JPA相关组件）通常向spring注册组件都是使用xml、@Bea...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/liudajiang">来自：	<span class="blog_title"> liudajiang的专栏</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    <div class="recommend-item-box recommend-ad-box"><div id="kp_box_65" data-pid="65" data-track-view='{"mod":"kp_popu_65-84","con":",,"}' data-track-click='{"mod":"kp_popu_65-84","con":",,"}'><div id="three_ad33" class="mediav_ad" ></div>
<script>
                                               NEWS_FEED({
                w: 852,
                h : 60,
                showid : 'GNKXx7',
                placeholderId: "three_ad33",
                inject : 'define',
                define : {
                    imagePosition : 'left',
                    imageBorderRadius : 3,
                    imageWidth: 90,
                    imageHeight: 60,
                    imageFill : 'clip',
                    displayImage : true,
                    displayTitle : true,
                    titleFontSize: 18,
                    titleFontColor: '#000',
                    titleFontFamily : 'Lato,-apple-system,SF UI Text,Arial,PingFang SC,Hiragino Sans GB,Microsoft YaHei,WenQuanYi Micro Hei,sans-serif',
                    titleFontWeight: 'bold',
                    titlePaddingTop : 0,
                    titlePaddingRight : 0,
                    titlePaddingBottom : 5,
                    titlePaddingLeft : 16,
                    displayDesc : true,
                    descFontSize: 14,
                    descFontColor: '#8e959a',
                    descFontFamily : 'Microsoft Yahei',
                    paddingTop : 0,
                    paddingRight : 0,
                    paddingBottom : 0,
                    paddingLeft : 0,
                    backgroundColor: '#fff',
                    hoverColor: '#000'
                      }
                  })
                                        </script></div></div>
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/sinat_28690417/article/details/78799033,BlogCommendFromBaidu_33"}'>
			<div class="content">
				<a href="https://blog.csdn.net/sinat_28690417/article/details/78799033" target="_blank" title="[ Spring Boot ] Bean 单例注入">
				<h4 class="text-truncate oneline">
						[ <em>Spring</em> <em>Boot</em> ] <em>Bean</em> 单例注入				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">12-14</span>
						<span class="read-num hover-hide">
              阅读数 
							1万+</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/sinat_28690417/article/details/78799033" target="_blank" title="[ Spring Boot ] Bean 单例注入">
							<span class="desc oneline">SpringBoot注入Bean一、@Bean方式1、在WebMvcConfigurerAdapter的子类中添加@Bean,返回实例对象即可packagecn.com.showclear.plan....</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/sinat_28690417">来自：	<span class="blog_title"> Yiyuery's NoteBooks</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/hfmbook/article/details/70209178,BlogCommendFromBaidu_34"}'>
			<div class="content">
				<a href="https://blog.csdn.net/hfmbook/article/details/70209178" target="_blank" title="Spring Boot  动态创建Bean">
				<h4 class="text-truncate oneline">
						<em>Spring</em> <em>Boot</em>  动态创建<em>Bean</em>				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">04-17</span>
						<span class="read-num hover-hide">
              阅读数 
							5969</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/hfmbook/article/details/70209178" target="_blank" title="Spring Boot  动态创建Bean">
							<span class="desc oneline">1、通过注解@Import导入方式创建a、新建MyImportBeanDefinitionRegistrar注册中心importorg.springframework.beans.factory.su...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/hfmbook">来自：	<span class="blog_title"> Y-CAT的专栏</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/Michaelwubo/article/details/78792210,BlogCommendFromBaidu_35"}'>
			<div class="content">
				<a href="https://blog.csdn.net/Michaelwubo/article/details/78792210" target="_blank" title="Spring Boot实战系列教程">
				<h4 class="text-truncate oneline">
						<em>Spring</em> <em>Boot</em><em>实战</em>系列教程				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">12-13</span>
						<span class="read-num hover-hide">
              阅读数 
							1644</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/Michaelwubo/article/details/78792210" target="_blank" title="Spring Boot实战系列教程">
							<span class="desc oneline">http://ms.csdn.net/geek/200613</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/Michaelwubo">来自：	<span class="blog_title"> 码农崛起</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/zgyjk/article/details/80780165,BlogCommendFromBaidu_36"}'>
			<div class="content">
				<a href="https://blog.csdn.net/zgyjk/article/details/80780165" target="_blank" title="Spring的@Import注解与ImportAware接口">
				<h4 class="text-truncate oneline">
						<em>Spring</em>的@Import注解与ImportAware接口				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">06-23</span>
						<span class="read-num hover-hide">
              阅读数 
							1105</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/zgyjk/article/details/80780165" target="_blank" title="Spring的@Import注解与ImportAware接口">
							<span class="desc oneline">最近在使用Redisson做分布式会话管理时，为了扩展其功能，研究了它的@EnableRedissonHttpSession等部分源码，在其中发现了一个有趣的注解@Import和一个ImportAwa...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/zgyjk">来自：	<span class="blog_title"> zgyjk的博客</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    			<div class="recommend-item-box recommend-box-ident recommend-download-box clearfix"  data-track-click='{"mod":"popu_387","con":",https://download.csdn.net/download/qq_30146831/10574071,BlogCommendFromQuerySearch_37"}'>
			<a href="https://download.csdn.net/download/qq_30146831/10574071" target="_blank">
				<div class="content clearfix">
					<div class="">
						<h4 class="text-truncate oneline clearfix">
							<em>Spring</em> <em>Boot</em><em>实战</em>中文版						</h4>
						<span class="data float-right">07-31</span>
					</div>
					<div class="desc oneline">
							Spring Boot实战中文版Spring Boot实战中文版Spring Boot实战中文版Spring Boot实战中文版Spring Boot实战中文版Spring Boot实战中文版					</div>
          <span class="type-show type-show-download">下载</span>
				</div>
			</a>
		</div>
	
    <div class="recommend-item-box recommend-ad-box"><div id="kp_box_66" data-pid="66" data-track-view='{"mod":"kp_popu_66-808","con":",,"}' data-track-click='{"mod":"kp_popu_66-808","con":",,"}'><script
    async="async"
    charset="utf-8"
    src="https://shared.ydstatic.com/js/yatdk/3.0.1/stream.js"
    data-id="8935aa488dd58452b9e5ee3b44f1212f"
    data-div-Style="width:100%;"
data-tit-Style="margin-bottom: 6px; font-size: 18px; line-height: 24px; color: #3d3d3d;display: inline-block;font-weight:bold;"
data-des-Style="font-size: 13px; line-height: 22px; white-space: normal; color: #999;"
data-img-Style="float:left;margin-right:15px;width:90px;height:60px;">
</script></div></div>
    
    			<div class="recommend-item-box recommend-box-ident recommend-download-box clearfix"  data-track-click='{"mod":"popu_387","con":",https://download.csdn.net/download/qq_30146831/10574078,BlogCommendFromQuerySearch_38"}'>
			<a href="https://download.csdn.net/download/qq_30146831/10574078" target="_blank">
				<div class="content clearfix">
					<div class="">
						<h4 class="text-truncate oneline clearfix">
							<em>Spring</em> <em>Boot</em><em>实战</em>英文版						</h4>
						<span class="data float-right">07-31</span>
					</div>
					<div class="desc oneline">
							Spring Boot实战英文版Spring Boot实战英文版Spring Boot实战英文版Spring Boot实战英文版Spring Boot实战英文版Spring Boot实战英文版Spring Boot in Action-e...					</div>
          <span class="type-show type-show-download">下载</span>
				</div>
			</a>
		</div>
	
    
    
    			<div class="recommend-item-box recommend-box-ident recommend-download-box clearfix"  data-track-click='{"mod":"popu_387","con":",https://download.csdn.net/download/zhyuau8619/10360183,BlogCommendFromQuerySearch_39"}'>
			<a href="https://download.csdn.net/download/zhyuau8619/10360183" target="_blank">
				<div class="content clearfix">
					<div class="">
						<h4 class="text-truncate oneline clearfix">
							<em>Spring</em><em>Boot</em>源码解析及<em>实战</em>						</h4>
						<span class="data float-right">04-19</span>
					</div>
					<div class="desc oneline">
							包含SpringBoot源码解析文档和SpringBoot实战等一步步指导SpringBoot					</div>
          <span class="type-show type-show-download">下载</span>
				</div>
			</a>
		</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/qq_32198005/article/details/78435648,BlogCommendFromBaidu_40"}'>
			<div class="content">
				<a href="https://blog.csdn.net/qq_32198005/article/details/78435648" target="_blank" title="springboot 启动报错 java.lang.IllegalStateException: Failed to introspect annotated methods on class org">
				<h4 class="text-truncate oneline">
						<em>spring</em><em>boot</em> 启动报错 java.lang.IllegalStateException: Failed to introspect annotated methods on class org				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">11-03</span>
						<span class="read-num hover-hide">
              阅读数 
							2万+</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/qq_32198005/article/details/78435648" target="_blank" title="springboot 启动报错 java.lang.IllegalStateException: Failed to introspect annotated methods on class org">
							<span class="desc oneline">idea启动springboot+maven项目报错：._________/\\/___'_____(_)______\\\\(()\___|'_|'_||'_\/_`|\\\\\\/___)||_)...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/qq_32198005">来自：	<span class="blog_title"> 一纸书笺</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/q383965374/article/details/54929262,BlogCommendFromBaidu_41"}'>
			<div class="content">
				<a href="https://blog.csdn.net/q383965374/article/details/54929262" target="_blank" title="单点登录(九)-----遇到问题-----FileNotFoundException: class path resource-UsernamePasswordWrapperAuthenticatio">
				<h4 class="text-truncate oneline">
						单点登录(九)-----遇到问题-----FileNotFoundException: class path resource-UsernamePasswordWrapperAuthenticatio				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">02-08</span>
						<span class="read-num hover-hide">
              阅读数 
							3182</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/q383965374/article/details/54929262" target="_blank" title="单点登录(九)-----遇到问题-----FileNotFoundException: class path resource-UsernamePasswordWrapperAuthenticatio">
							<span class="desc oneline">运行casserver项目时报错FileNotFoundException:classpathresource-UsernamePasswordWrapperAuthenticatio完整信息如下:o...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/q383965374">来自：	<span class="blog_title"> 直到世界的尽头</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident recommend-other-item-box"  data-track-click='{"mod":"popu_387","con":",http://ask.csdn.net/questions/153615,BlogCommendFromBaidu_42"}'>
		<a href="http://ask.csdn.net/questions/153615" target="_blank">
			<h4 class="text-truncate oneline">
					sqlmapconfig.xml读取异常什么的完全搞不懂，求指教			</h4>
			<div class="info-box d-flex align-content-center">
					<span class="date">10-10</span>
			</div>
			<p class="content oneline">
        <span class="desc oneline">-</span>
                  <span class="type-show type-show-ask">问答</span>
        			</p>
		</a>

	</div>
	
    <div class="recommend-item-box recommend-ad-box"><div id="kp_box_67" data-pid="67" data-track-view='{"mod":"kp_popu_67-808","con":",,"}' data-track-click='{"mod":"kp_popu_67-808","con":",,"}'><script
    async="async"
    charset="utf-8"
    src="https://shared.ydstatic.com/js/yatdk/3.0.1/stream.js"
    data-id="8935aa488dd58452b9e5ee3b44f1212f"
    data-div-Style="width:100%;"
data-tit-Style="margin-bottom: 6px; font-size: 18px; line-height: 24px; color: #3d3d3d;display: inline-block;font-weight:bold;"
data-des-Style="font-size: 13px; line-height: 22px; white-space: normal; color: #999;"
data-img-Style="float:left;margin-right:15px;width:90px;height:60px;">
</script></div></div>
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/baidu_32045201/article/details/78386058,BlogCommendFromBaidu_43"}'>
			<div class="content">
				<a href="https://blog.csdn.net/baidu_32045201/article/details/78386058" target="_blank" title="IDEA中Spring配置错误：class path resource [.xml] cannot be opened because it does not exist">
				<h4 class="text-truncate oneline">
						IDEA中<em>Spring</em>配置错误：class path resource [.xml] cannot be opened because it does not exist				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">10-29</span>
						<span class="read-num hover-hide">
              阅读数 
							2万+</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/baidu_32045201/article/details/78386058" target="_blank" title="IDEA中Spring配置错误：class path resource [.xml] cannot be opened because it does not exist">
							<span class="desc oneline">如果在运行Spring项目时出现了类似于：classpathresource[applicationContext.xml]cannotbeopenedbecauseitdoesnotexist这样的...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/baidu_32045201">来自：	<span class="blog_title"> WhataNerd的博客</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/allen19901008/article/details/30228221,BlogCommendFromBaidu_44"}'>
			<div class="content">
				<a href="https://blog.csdn.net/allen19901008/article/details/30228221" target="_blank" title="springMVC整合mybatis时候配置mybatis-config异常">
				<h4 class="text-truncate oneline">
						<em>spring</em>MVC整合mybatis时候配置mybatis-config异常				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">06-12</span>
						<span class="read-num hover-hide">
              阅读数 
							1万+</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/allen19901008/article/details/30228221" target="_blank" title="springMVC整合mybatis时候配置mybatis-config异常">
							<span class="desc oneline">org.springframework.beans.factory.BeanCreationException:Errorcreatingbeanwithname'userServiceImpl':I...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/allen19901008">来自：	<span class="blog_title"> allen19901008的专栏</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/lsm135/article/details/53300912,BlogCommendFromBaidu_45"}'>
			<div class="content">
				<a href="https://blog.csdn.net/lsm135/article/details/53300912" target="_blank" title="Spring--BeanFactoryPostProcessor学习笔记">
				<h4 class="text-truncate oneline">
						<em>Spring</em>--<em>Bean</em>FactoryPostProcessor学习笔记				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">11-23</span>
						<span class="read-num hover-hide">
              阅读数 
							2446</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/lsm135/article/details/53300912" target="_blank" title="Spring--BeanFactoryPostProcessor学习笔记">
							<span class="desc oneline">第一篇学习笔记，深感智商不足，看spring看不明白，所以把比较疑惑的地方写下来还是从refresh方法进去，在obtainFreshBeanFactory方法中，就已经loadBeanDefinit...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/lsm135">来自：	<span class="blog_title"> liushaoming</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    			<div class="recommend-item-box recommend-box-ident recommend-download-box clearfix"  data-track-click='{"mod":"popu_387","con":",https://download.csdn.net/download/u010180738/9880015,BlogCommendFromBaidu_46"}'>
			<a href="https://download.csdn.net/download/u010180738/9880015" target="_blank">
				<div class="content clearfix">
					<div class="">
						<h4 class="text-truncate oneline clearfix">
							<em>Spring</em> <em>boot</em><em>实战</em>(高清完整版带书签)PDF 下载						</h4>
						<span class="data float-right">06-25</span>
					</div>
					<div class="desc oneline">
							Spring boot实战(高清完整版带书签)PDF					</div>
          <span class="type-show type-show-download">下载</span>
				</div>
			</a>
		</div>
	
    
    
    			<div class="recommend-item-box recommend-box-ident recommend-download-box clearfix"  data-track-click='{"mod":"popu_387","con":",https://download.csdn.net/download/wliu/10372221,BlogCommendFromBaidu_47"}'>
			<a href="https://download.csdn.net/download/wliu/10372221" target="_blank">
				<div class="content clearfix">
					<div class="">
						<h4 class="text-truncate oneline clearfix">
							<em>Spring</em><em>Boot</em><em>实战</em> (第4版)						</h4>
						<span class="data float-right">04-25</span>
					</div>
					<div class="desc oneline">
							第1章 入门 1.1　Spring 风云再起 1.1.1　重新认识 Spring 1.1.2　Spring Boot 精要 1.1.3　Spring Boot 不是什么 1.2　Spring Boot					</div>
          <span class="type-show type-show-download">下载</span>
				</div>
			</a>
		</div>
	
    <div class="recommend-item-box recommend-ad-box"><div id="kp_box_68" data-pid="68" data-track-view='{"mod":"kp_popu_68-654","con":",,"}' data-track-click='{"mod":"kp_popu_68-654","con":",,"}'><div id="three_ad48" class="mediav_ad" ></div>
<script>
                                               NEWS_FEED({
                w: 900,
                h : 84,
                showid : 'Afihld',
                placeholderId: "three_ad48",
                inject : 'define',
                define : {
                    imagePosition : 'left',
                    imageBorderRadius : 3,
                    imageWidth: 90,
                    imageHeight: 60,
                    imageFill : 'clip',
                    displayImage : true,
                    displayTitle : true,
                    titleFontSize: 16,
                    titleFontColor: '#000',
                    titleFontFamily : 'Microsoft Yahei',
                    titleFontWeight: 'bold',
                    titlePaddingTop : 0,
                    titlePaddingRight : 0,
                    titlePaddingBottom : 5,
                    titlePaddingLeft : 16,
                    displayDesc : true,
                    descFontSize: 14,
                    descFontColor: '#8e959a',
                    descFontFamily : 'Microsoft Yahei',
                    paddingTop : 10,
                    paddingRight : 0,
                    paddingBottom : 0,
                    paddingLeft : 0,
                    backgroundColor: '#fff',
                    hoverColor: '#000'
                      }
                  })
                                        </script></div></div>
    
    			<div class="recommend-item-box recommend-box-ident recommend-download-box clearfix"  data-track-click='{"mod":"popu_387","con":",https://download.csdn.net/download/chendang1314/9888761,BlogCommendFromBaidu_48"}'>
			<a href="https://download.csdn.net/download/chendang1314/9888761" target="_blank">
				<div class="content clearfix">
					<div class="">
						<h4 class="text-truncate oneline clearfix">
							<em>spring</em> <em>boot</em>项目源码						</h4>
						<span class="data float-right">07-04</span>
					</div>
					<div class="desc oneline">
							spring boot项目源码					</div>
          <span class="type-show type-show-download">下载</span>
				</div>
			</a>
		</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/ID19870510/article/details/79677725,BlogCommendFromBaidu_49"}'>
			<div class="content">
				<a href="https://blog.csdn.net/ID19870510/article/details/79677725" target="_blank" title="SpringBoot Bean加载顺序 Order无效">
				<h4 class="text-truncate oneline">
						<em>Spring</em><em>Boot</em> <em>Bean</em><em>加载</em>顺序 Order无效				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">03-24</span>
						<span class="read-num hover-hide">
              阅读数 
							3896</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/ID19870510/article/details/79677725" target="_blank" title="SpringBoot Bean加载顺序 Order无效">
							<span class="desc oneline">@Bean@Order(1)publicxxx1createXxx1(){returnnewxxx1();}@Bean@Order(2)publicxxx2createXxx2(){returnnew...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/ID19870510">来自：	<span class="blog_title"> 天下无双</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/u013492143/article/details/77876275,BlogCommendHotData_0"}'>
			<div class="content">
				<a href="https://blog.csdn.net/u013492143/article/details/77876275" target="_blank" title="并行计算、分布式计算和云计算的区别">
				<h4 class="text-truncate oneline">
						并行计算、分布式计算和云计算的区别				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">09-07</span>
						<span class="read-num hover-hide">
              阅读数 
							4116</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/u013492143/article/details/77876275" target="_blank" title="并行计算、分布式计算和云计算的区别">
							<span class="desc oneline">http://blog.csdn.net/wm_1991/article/details/50257269</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/u013492143">来自：	<span class="blog_title"> u013492143的博客</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/yyl424525/article/details/77859911,BlogCommendHotData_1"}'>
			<div class="content">
				<a href="https://blog.csdn.net/yyl424525/article/details/77859911" target="_blank" title="数据结构-线段树详解（含java源代码）">
				<h4 class="text-truncate oneline">
						数据结构-线段树详解（含java源代码）				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">09-05</span>
						<span class="read-num hover-hide">
              阅读数 
							2167</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/yyl424525/article/details/77859911" target="_blank" title="数据结构-线段树详解（含java源代码）">
							<span class="desc oneline">1 线段树的定义 
      首先，线段树是一棵二叉树。它的特点是：每个结点表示的是一个线段，或者说是一个区间。事实上，一棵线段树的根结点表示的是“整体”区间，而它的左右子树也是一棵线段树，分别表示...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/yyl424525">来自：	<span class="blog_title"> yyl424525的博客</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/diandianxiyu/article/details/53068012,BlogCommendHotData_2"}'>
			<div class="content">
				<a href="https://blog.csdn.net/diandianxiyu/article/details/53068012" target="_blank" title="【小程序】微信小程序开发实践">
				<h4 class="text-truncate oneline">
						【小程序】微信小程序开发实践				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">11-07</span>
						<span class="read-num hover-hide">
              阅读数 
							21万+</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/diandianxiyu/article/details/53068012" target="_blank" title="【小程序】微信小程序开发实践">
							<span class="desc oneline">帐号相关流程注册范围
企业
政府
媒体
其他组织换句话讲就是不让个人开发者注册。 :)填写企业信息不能使用和之前的公众号账户相同的邮箱,也就是说小程序是和微信公众号一个层级的。填写公司机构信息,对公账...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/diandianxiyu">来自：	<span class="blog_title"> 小雨同学的技术博客</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/xu__cg/article/details/53054439,BlogCommendHotData_3"}'>
			<div class="content">
				<a href="https://blog.csdn.net/xu__cg/article/details/53054439" target="_blank" title="Java设计模式11——享元模式">
				<h4 class="text-truncate oneline">
						Java设计模式11——享元模式				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">11-06</span>
						<span class="read-num hover-hide">
              阅读数 
							2834</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/xu__cg/article/details/53054439" target="_blank" title="Java设计模式11——享元模式">
							<span class="desc oneline">一、适用场景　　内存属于稀缺资源，不能随意浪费。如果在一个系统中有很多个完全相同或相似的对象，我们就可以使用享元模式，让他们共享一份内存即可，不必每个都去实例化对象，从而节省内存空间。二、模式核心
享...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/xu__cg">来自：	<span class="blog_title"> 小小本科生成长之路</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/iloveyin/article/details/39998651,BlogCommendHotData_4"}'>
			<div class="content">
				<a href="https://blog.csdn.net/iloveyin/article/details/39998651" target="_blank" title="腾讯视频解析接口">
				<h4 class="text-truncate oneline">
						腾讯视频解析接口				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">10-11</span>
						<span class="read-num hover-hide">
              阅读数 
							2万+</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/iloveyin/article/details/39998651" target="_blank" title="腾讯视频解析接口">
							<span class="desc oneline">普通流视频（完整视频）

http://vv.video.qq.com/geturl?vid=v00149uf4ir&amp;otype=json

高清视频（分段视频）

1080P-fhd，超...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/iloveyin">来自：	<span class="blog_title"> 专注于互联网架构技术，努力成为一名架构师</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/liangzi_lucky/article/details/52459378,BlogCommendHotData_5"}'>
			<div class="content">
				<a href="https://blog.csdn.net/liangzi_lucky/article/details/52459378" target="_blank" title="springMVC执行流程及原理">
				<h4 class="text-truncate oneline">
						springMVC执行流程及原理				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">09-07</span>
						<span class="read-num hover-hide">
              阅读数 
							5万+</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/liangzi_lucky/article/details/52459378" target="_blank" title="springMVC执行流程及原理">
							<span class="desc oneline">spring的MVC执行原理

1.spring mvc将所有的请求都提交给DispatcherServlet,它会委托应用系统的其他模块负责对请求 进行真正的处理工作。
2.Dispatcher...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/liangzi_lucky">来自：	<span class="blog_title"> 每一段路，都是一种领悟!</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/u013905744/article/details/51752044,BlogCommendHotData_6"}'>
			<div class="content">
				<a href="https://blog.csdn.net/u013905744/article/details/51752044" target="_blank" title="Java的组合（持有对象）与继承的区别">
				<h4 class="text-truncate oneline">
						Java的组合（持有对象）与继承的区别				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">06-24</span>
						<span class="read-num hover-hide">
              阅读数 
							1345</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/u013905744/article/details/51752044" target="_blank" title="Java的组合（持有对象）与继承的区别">
							<span class="desc oneline">组合 继承 持有对象  Adapter设计模式   组合（持有对象）与继承的区别</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/u013905744">来自：	<span class="blog_title"> u013905744的专栏</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/qq_36892341/article/details/73918672,BlogCommendHotData_7"}'>
			<div class="content">
				<a href="https://blog.csdn.net/qq_36892341/article/details/73918672" target="_blank" title="linux上安装Docker(非常简单的安装方法)">
				<h4 class="text-truncate oneline">
						linux上安装Docker(非常简单的安装方法)				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">06-29</span>
						<span class="read-num hover-hide">
              阅读数 
							17万+</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/qq_36892341/article/details/73918672" target="_blank" title="linux上安装Docker(非常简单的安装方法)">
							<span class="desc oneline">最近比较有空，大四出来实习几个月了，作为实习狗的我，被叫去研究Docker了，汗汗！

Docker的三大核心概念：镜像、容器、仓库
镜像：类似虚拟机的镜像、用俗话说就是安装文件。
容器：类似一个轻量...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/qq_36892341">来自：	<span class="blog_title"> 我走小路的博客</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/u012874222/article/details/79400154,BlogCommendHotData_8"}'>
			<div class="content">
				<a href="https://blog.csdn.net/u012874222/article/details/79400154" target="_blank" title="卡顿监测之真正轻量级的卡顿监测工具BlockDetectUtil（仅一个类）">
				<h4 class="text-truncate oneline">
						卡顿监测之真正轻量级的卡顿监测工具BlockDetectUtil（仅一个类）				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">03-01</span>
						<span class="read-num hover-hide">
              阅读数 
							984</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/u012874222/article/details/79400154" target="_blank" title="卡顿监测之真正轻量级的卡顿监测工具BlockDetectUtil（仅一个类）">
							<span class="desc oneline">一、背景    一直以来，应用的流畅度都关乎着用户的体验性，而体验性好的产品自然而然会受到更多用户的欢迎，所以对于广大的工程师来说，界面的卡顿优化一直是Android应用性能优化的重要一环。而当前应用...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/u012874222">来自：	<span class="blog_title"> u012874222的博客</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/wuchengzeng/article/details/50037611,BlogCommendHotData_9"}'>
			<div class="content">
				<a href="https://blog.csdn.net/wuchengzeng/article/details/50037611" target="_blank" title="jquery/js实现一个网页同时调用多个倒计时(最新的)">
				<h4 class="text-truncate oneline">
						jquery/js实现一个网页同时调用多个倒计时(最新的)				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">11-25</span>
						<span class="read-num hover-hide">
              阅读数 
							38万+</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/wuchengzeng/article/details/50037611" target="_blank" title="jquery/js实现一个网页同时调用多个倒计时(最新的)">
							<span class="desc oneline">jquery/js实现一个网页同时调用多个倒计时(最新的)

最近需要网页添加多个倒计时. 查阅网络,基本上都是千遍一律的不好用. 自己按需写了个.希望对大家有用. 有用请赞一个哦!



//js
...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/wuchengzeng">来自：	<span class="blog_title"> Websites</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/lsx991947534/article/details/45499205,BlogCommendHotData_10"}'>
			<div class="content">
				<a href="https://blog.csdn.net/lsx991947534/article/details/45499205" target="_blank" title="servlet+jsp实现过滤器，防止用户未登录访问">
				<h4 class="text-truncate oneline">
						servlet+jsp实现过滤器，防止用户未登录访问				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">05-05</span>
						<span class="read-num hover-hide">
              阅读数 
							1万+</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/lsx991947534/article/details/45499205" target="_blank" title="servlet+jsp实现过滤器，防止用户未登录访问">
							<span class="desc oneline">我们可能经常会用到这一功能，比如有时，我们不希望用户没有进行登录访问后台的操作页面，而且这样的非法访问会让系统极为的不安全，所以我们常常需要进行登录才授权访问其它页面，否则只会出现登录页面，当然我的思...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/lsx991947534">来自：	<span class="blog_title"> 沉默的鲨鱼的专栏</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/ABCD_0000/article/details/6803694,BlogCommendHotData_11"}'>
			<div class="content">
				<a href="https://blog.csdn.net/ABCD_0000/article/details/6803694" target="_blank" title="何为数据库连接池？其工作原理是什么？">
				<h4 class="text-truncate oneline">
						何为数据库连接池？其工作原理是什么？				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">09-23</span>
						<span class="read-num hover-hide">
              阅读数 
							1万+</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/ABCD_0000/article/details/6803694" target="_blank" title="何为数据库连接池？其工作原理是什么？">
							<span class="desc oneline">连接池用于创建和管理数据库连接的缓冲池技术，缓冲池中的连接可以被任何需要他们的线程使用。当一个线程需要用JDBC对一个数据库操作时，将从池中请求一个连接。当这个连接使用完毕后，将返回到连接池中，等待为...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/ABCD_0000">来自：	<span class="blog_title"> Napoleon的专栏</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/pongba/article/details/1659952,BlogCommendHotData_12"}'>
			<div class="content">
				<a href="https://blog.csdn.net/pongba/article/details/1659952" target="_blank" title="《C++0x漫谈》系列之：多线程内存模型">
				<h4 class="text-truncate oneline">
						《C++0x漫谈》系列之：多线程内存模型				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">06-20</span>
						<span class="read-num hover-hide">
              阅读数 
							4万+</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/pongba/article/details/1659952" target="_blank" title="《C++0x漫谈》系列之：多线程内存模型">
							<span class="desc oneline">《C++0x漫谈》系列之：多线程内存模型 By 刘未鹏(pongba)刘言|C++的罗浮宫(http://blog.csdn.net/pongba)  《C++0x漫谈》系列导言 这个系列其实早就想写...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/pongba">来自：	<span class="blog_title"> 刘未鹏|C++的罗浮宫</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/gefangshuai/article/details/50328451,BlogCommendHotData_13"}'>
			<div class="content">
				<a href="https://blog.csdn.net/gefangshuai/article/details/50328451" target="_blank" title="关于SpringBoot bean无法注入的问题（与文件包位置有关）">
				<h4 class="text-truncate oneline">
						关于SpringBoot bean无法注入的问题（与文件包位置有关）				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">12-16</span>
						<span class="read-num hover-hide">
              阅读数 
							13万+</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/gefangshuai/article/details/50328451" target="_blank" title="关于SpringBoot bean无法注入的问题（与文件包位置有关）">
							<span class="desc oneline">问题场景描述整个项目通过Maven构建，大致结构如下：
核心Spring框架一个module spring-boot-base
service和dao一个module server-core
提供系统...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/gefangshuai">来自：	<span class="blog_title"> 开发随笔</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/hero_fantao/article/details/34533533,BlogCommendHotData_14"}'>
			<div class="content">
				<a href="https://blog.csdn.net/hero_fantao/article/details/34533533" target="_blank" title="连续特征离散化和归一化">
				<h4 class="text-truncate oneline">
						连续特征离散化和归一化				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">06-25</span>
						<span class="read-num hover-hide">
              阅读数 
							2万+</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/hero_fantao/article/details/34533533" target="_blank" title="连续特征离散化和归一化">
							<span class="desc oneline">连续特征进行离散化处理。</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/hero_fantao">来自：	<span class="blog_title"> hero_fantao的专栏</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/Tiaaaaa/article/details/58116346,BlogCommendHotData_15"}'>
			<div class="content">
				<a href="https://blog.csdn.net/Tiaaaaa/article/details/58116346" target="_blank" title="R语言逻辑回归、ROC曲线和十折交叉验证">
				<h4 class="text-truncate oneline">
						R语言逻辑回归、ROC曲线和十折交叉验证				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">02-27</span>
						<span class="read-num hover-hide">
              阅读数 
							4万+</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/Tiaaaaa/article/details/58116346" target="_blank" title="R语言逻辑回归、ROC曲线和十折交叉验证">
							<span class="desc oneline">自己整理编写的逻辑回归模板，作为学习笔记记录分享。数据集用的是14个自变量Xi，一个因变量Y的australian数据集。


1. 测试集和训练集3、7分组
australian ...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/Tiaaaaa">来自：	<span class="blog_title"> Tiaaaaa的博客</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
    		<div class="recommend-item-box recommend-box-ident type_blog clearfix"  data-track-click='{"mod":"popu_387","con":",https://blog.csdn.net/qq574857122/article/details/16361033,BlogCommendHotData_16"}'>
			<div class="content">
				<a href="https://blog.csdn.net/qq574857122/article/details/16361033" target="_blank" title="强连通分量及缩点tarjan算法解析">
				<h4 class="text-truncate oneline">
						强连通分量及缩点tarjan算法解析				</h4>
				<div class="info-box d-flex align-content-center">
					<p class="date-and-readNum oneline">
						<span class="date hover-show">11-16</span>
						<span class="read-num hover-hide">
              阅读数 
							50万+</span>
						</p>
					</div>
				</a>
					<p class="content">
						<a href="https://blog.csdn.net/qq574857122/article/details/16361033" target="_blank" title="强连通分量及缩点tarjan算法解析">
							<span class="desc oneline">强连通分量：
简言之 就是找环（每条边只走一次，两两可达）
孤立的一个点也是一个连通分量 
 
使用tarjan算法 在嵌套的多个环中优先得到最大环( 最小环就是每个孤立点）
 
定义：
int Ti...</span>
						</a>
						  <span class="blog_title_box oneline ">
							                <span class="type-show type-show-blog type-show-after">博文</span>
                                  <a target="_blank" href="https://blog.csdn.net/qq574857122">来自：	<span class="blog_title"> 九野的博客</span></a>
                							              </span>
					</p>
			</div>
					</div>
	
    
    
        <div class="recommend-item-box type_hot_word">
            <div class="content clearfix">
        <div class="word float-left">
                          <span>
            <a href="https://edu.csdn.net/course/play/5840/111513 " target="_blank">
            Java spring cloud用户权限设计          </a></span>
                                  <span>
            <a href="https://edu.csdn.net/course/play/5840/112489 " target="_blank">
            Java spring cloud 部署方案          </a></span>
                                  <span>
            <a href="https://edu.csdn.net/course/play/5840/112480 " target="_blank">
            Java spring cloud前后端分离权限控制          </a></span>
                                  <span>
            <a href="https://edu.csdn.net/course/play/5840/111511 " target="_blank">
            Java spring cloud服务鉴权搭建          </a></span>
                                  <span>
            <a href="https://edu.csdn.net/course/play/5840/111512 " target="_blank">
            Java spring cloud服务鉴权agent配置          </a></span>
                        </div>
      </div>
                  <div class="content clearfix">
        <div class="float-left">
                  <span>
            <a href="https://www.csdn.net/gather_2a/NtzaMg5sODg3LWJsb2cO0O0O.html" target="_blank">
            bootstrap与spring</a>
          </span>
                  <span>
            <a href="https://www.csdn.net/gather_25/MtTakg4sODM5MC1ibG9n.html" target="_blank">
            android boot文件在哪</a>
          </span>
                  <span>
            <a href="https://www.csdn.net/gather_2f/NtzaUgysMzk2LWJsb2cO0O0O.html" target="_blank">
            +spring bootstrap</a>
          </span>
                  <span>
            <a href="https://www.csdn.net/gather_22/NtzaUgzsNDg1LWJsb2cO0O0O.html" target="_blank">
            bootstrap mv spring</a>
          </span>
                  <span>
            <a href="https://www.csdn.net/gather_26/NtzaYg2sODI3LWJsb2cO0O0O.html" target="_blank">
            bootstrap搭建 spring</a>
          </span>
                  <span>
            <a href="https://www.csdn.net/gather_4a/NtDaMgwsNS1lZHUO0O0O.html" target="_blank">
            python实战</a>
          </span>
                  <span>
            <a href="https://www.csdn.net/gather_4a/NtTaYg2sNC1lZHUO0O0O.html" target="_blank">
            实战python培训</a>
          </span>
                </div>
      </div>
          </div>


            <div class="recommend-loading-box">
                <img src='https://csdnimg.cn/release/phoenix/images/feedLoading.gif'>
            </div>
            <div class="recommend-end-box">
                <p class="text-center">没有更多推荐了，<a href="https://blog.csdn.net/" class="c-blue c-blue-hover c-blue-focus">返回首页</a></p>
            </div>
        </div>
    </main>

    <aside>
		    <div id="asideProfile" class="aside-box">
    <!-- <h3 class="aside-title">个人资料</h3> -->
    <div class="profile-intro d-flex">
        <div class="avatar-box d-flex justify-content-center flex-column">
            <a href="https://blog.csdn.net/liaokailin">
                <img src="https://avatar.csdn.net/6/B/D/3_liaokailin.jpg" class="avatar_pic">
            </a>
            
        </div>
        <div class="user-info d-flex justify-content-center flex-column">
            <p class="name csdn-tracking-statistics tracking-click" data-mod="popu_379">
                <a href="https://blog.csdn.net/liaokailin" target="_blank" class="" id="uid">liaokailin</a>
            </p>
                    </div>
                <div class="opt-box d-flex justify-content-center flex-column">
            <span  class="csdn-tracking-statistics tracking-click" data-mod="popu_379">
                <a class="btn btn-sm btn-red-hollow attention" id="btnAttent">关注</a>
            </span>
        </div>
            </div>
    <div class="data-info d-flex item-tiling">
                <dl class="text-center" title="31">
                        <dt><a href="https://blog.csdn.net/liaokailin?t=1">原创</a></dt>
            <dd><a href="https://blog.csdn.net/liaokailin?t=1"><span class="count">31</span></a></dd>
                    </dl>
        <dl class="text-center" id="fanBox" title="1084">
            <dt>粉丝</dt>
            <dd><span class="count" id="fan">1084</span></dd>
        </dl>
        <dl class="text-center" title="42">
            <dt>喜欢</dt>
            <dd><span class="count">42</span></dd>
        </dl>
        <dl class="text-center" title="138">
            <dt>评论</dt>
            <dd><span class="count">138</span></dd>
        </dl>
    </div>
    <div class="grade-box clearfix">
        <dl>
            <dt>等级：</dt>
            <dd>
                <a href="https://blog.csdn.net/home/help.html#level" title="5级,点击查看等级说明" target="_blank">
                    <svg class="icon icon-level" aria-hidden="true">
                        <use xlink:href="#csdnc-bloglevel-5"></use>
                    </svg>
                </a>
            </dd>
        </dl>
        <dl>
            <dt>访问：</dt>
            <dd title="970652">
                97万+            </dd>
        </dl>
        <dl>
            <dt>积分：</dt>
            <dd title="3359">
                3359            </dd>
        </dl>
        <dl title="16058">
            <dt>排名：</dt>
            <dd>1万+</dd>
        </dl>
    </div>
    </div>
		    <div class="csdn-tracking-statistics mb8 box-shadow" data-pid="blog" data-mod="popu_4" style="height:250px;">
    <div class="aside-content text-center" id="cpro_u2734133">
      <div id="kp_box_56" data-pid="56" data-track-view='{"mod":"kp_popu_56-76","con":",,"}' data-track-click='{"mod":"kp_popu_56-76","con":",,"}'><script type="text/javascript">
    (function() {
        var s = "_" + Math.random().toString(36).slice(2);
        document.write('<div style="" id="' + s + '"></div>');
        (window.slotbydup = window.slotbydup || []).push({
            id: "u3032528",
            container:  s
        });
    })();
</script>
<!-- 多条广告如下脚本只需引入一次 -->
<script type="text/javascript" src="//cpro.baidustatic.com/cpro/ui/c.js" async="async" defer="defer" ></script></div>    </div>
</div>
		    <div id="asideNewArticle" class="aside-box">
    <h3 class="aside-title">最新文章</h3>
    <div class="aside-content">
        <ul class="inf_list clearfix csdn-tracking-statistics tracking-click" data-mod="popu_382">
                        <li class="clearfix">
                <a href="https://blog.csdn.net/liaokailin/article/details/66049607" target="_blank">如何构建高可用的分布式系统</a>
            </li>
                        <li class="clearfix">
                <a href="https://blog.csdn.net/liaokailin/article/details/52269786" target="_blank">spring boot实战(第十五篇)嵌入tomcat源码分析</a>
            </li>
                        <li class="clearfix">
                <a href="https://blog.csdn.net/liaokailin/article/details/52077620" target="_blank">zipkin</a>
            </li>
                        <li class="clearfix">
                <a href="https://blog.csdn.net/liaokailin/article/details/51612247" target="_blank">consul(第二篇)consul Ops</a>
            </li>
                        <li class="clearfix">
                <a href="https://blog.csdn.net/liaokailin/article/details/51559228" target="_blank">consul(第一篇)consul 入门</a>
            </li>
                    </ul>
    </div>
</div>
		    		    <div id="asideCategory" class="aside-box">
    <h3 class="aside-title">个人分类</h3>
    <div class="aside-content">
        <ul>
                        <li>
                <a class="clearfix" href="https://blog.csdn.net/liaokailin/article/category/6212338">
                    <span class="title oneline">springcloud</span>
                    <span class="count float-right">9篇</span>
                </a>
            </li>
                        <li>
                <a class="clearfix" href="https://blog.csdn.net/liaokailin/article/category/5765237">
                    <span class="title oneline">spring boot实战</span>
                    <span class="count float-right">15篇</span>
                </a>
            </li>
                        <li>
                <a class="clearfix" href="https://blog.csdn.net/liaokailin/article/category/5734317">
                    <span class="title oneline">redis</span>
                    <span class="count float-right">3篇</span>
                </a>
            </li>
                        <li>
                <a class="clearfix" href="https://blog.csdn.net/liaokailin/article/category/6255869">
                    <span class="title oneline">consul</span>
                    <span class="count float-right">2篇</span>
                </a>
            </li>
                        <li>
                <a class="clearfix" href="https://blog.csdn.net/liaokailin/article/category/6340178">
                    <span class="title oneline">msa</span>
                    <span class="count float-right">2篇</span>
                </a>
            </li>
                    </ul>
    </div>
    </div>
		    <div id="asideArchive" class="aside-box flexible-box">
    <h3 class="aside-title">归档</h3>
    <div class="aside-content">
        <ul class="archive-list">
                        <!--归档统计-->
            <li>
                <a href="https://blog.csdn.net/liaokailin/article/month/2017/03">
                    2017年3月                    <span class="count float-right">1篇</span>
                </a>
            </li>
                        <!--归档统计-->
            <li>
                <a href="https://blog.csdn.net/liaokailin/article/month/2016/08">
                    2016年8月                    <span class="count float-right">1篇</span>
                </a>
            </li>
                        <!--归档统计-->
            <li>
                <a href="https://blog.csdn.net/liaokailin/article/month/2016/07">
                    2016年7月                    <span class="count float-right">1篇</span>
                </a>
            </li>
                        <!--归档统计-->
            <li>
                <a href="https://blog.csdn.net/liaokailin/article/month/2016/06">
                    2016年6月                    <span class="count float-right">2篇</span>
                </a>
            </li>
                        <!--归档统计-->
            <li>
                <a href="https://blog.csdn.net/liaokailin/article/month/2016/05">
                    2016年5月                    <span class="count float-right">9篇</span>
                </a>
            </li>
                        <!--归档统计-->
            <li>
                <a href="https://blog.csdn.net/liaokailin/article/month/2015/11">
                    2015年11月                    <span class="count float-right">4篇</span>
                </a>
            </li>
                        <!--归档统计-->
            <li>
                <a href="https://blog.csdn.net/liaokailin/article/month/2015/10">
                    2015年10月                    <span class="count float-right">6篇</span>
                </a>
            </li>
                        <!--归档统计-->
            <li>
                <a href="https://blog.csdn.net/liaokailin/article/month/2015/09">
                    2015年9月                    <span class="count float-right">3篇</span>
                </a>
            </li>
                        <!--归档统计-->
            <li>
                <a href="https://blog.csdn.net/liaokailin/article/month/2015/08">
                    2015年8月                    <span class="count float-right">4篇</span>
                </a>
            </li>
                    </ul>
    </div>
        <p class="text-center">
        <a class="btn btn-link-blue flexible-btn" data-fbox="aside-archive">展开</a>
    </p>
    </div>
		    <div id="asideHotArticle" class="aside-box">
	<h3 class="aside-title">热门文章</h3>
	<div class="aside-content">
		<ul class="hotArticle-list csdn-tracking-statistics tracking-click" data-mod="popu_521">
							<li>
					<a href="https://blog.csdn.net/liaokailin/article/details/51307215">springcloud(第一篇)springcloud config 入门</a>
					<p class="read">阅读数 <span>105431</span></p>
				</li>
							<li>
					<a href="https://blog.csdn.net/liaokailin/article/details/51314001">springcloud(第三篇)springcloud eureka 服务注册与发现</a>
					<p class="read">阅读数 <span>89321</span></p>
				</li>
							<li>
					<a href="https://blog.csdn.net/liaokailin/article/details/49559571">spring boot实战(第十二篇)整合RabbitMQ</a>
					<p class="read">阅读数 <span>85760</span></p>
				</li>
							<li>
					<a href="https://blog.csdn.net/liaokailin/article/details/48948093">spring boot实战(第七篇)内嵌容器tomcat配置</a>
					<p class="read">阅读数 <span>61970</span></p>
				</li>
							<li>
					<a href="https://blog.csdn.net/liaokailin/article/details/47988617">spring boot实战(第一篇)第一个案例</a>
					<p class="read">阅读数 <span>55660</span></p>
				</li>
					</ul>
	</div>
</div>
		    <div id="asideNewComments" class="aside-box">
    <h3 class="aside-title">最新评论</h3>
    <div class="aside-content">
        <ul class="newcomment-list">
                        <li>
                <a class="title text-truncate" target="_blank" href="https://blog.csdn.net/liaokailin/article/details/52269786#comments">spring boot实战(第十五...</a>
                <p class="comment ellipsis">
                    <a href="https://my.csdn.net/qq_34687958" class="user-name" target="_blank">qq_34687958：</a>小哥，跪求继续更新SpringBoot                </p>
            </li>
                        <li>
                <a class="title text-truncate" target="_blank" href="https://blog.csdn.net/liaokailin/article/details/51469834#comments">springcloud(第七篇)s...</a>
                <p class="comment ellipsis">
                    <a href="https://my.csdn.net/Denny2333" class="user-name" target="_blank">Denny2333：</a>[reply]a1178013314[/reply]使用浏览器Postman插件                </p>
            </li>
                        <li>
                <a class="title text-truncate" target="_blank" href="https://blog.csdn.net/liaokailin/article/details/51612247#comments">consul(第二篇)consul...</a>
                <p class="comment ellipsis">
                    <a href="https://my.csdn.net/weixin_40027906" class="user-name" target="_blank">weixin_40027906：</a>[reply]delongcpp[/reply]
端口占用了啊                </p>
            </li>
                        <li>
                <a class="title text-truncate" target="_blank" href="https://blog.csdn.net/liaokailin/article/details/48948093#comments">spring boot实战(第七篇...</a>
                <p class="comment ellipsis">
                    <a href="https://my.csdn.net/lnazj" class="user-name" target="_blank">lnazj：</a>作者能分享一下自定义tomcat 的使用吗?                </p>
            </li>
                        <li>
                <a class="title text-truncate" target="_blank" href="https://blog.csdn.net/liaokailin/article/details/49559571#comments">spring boot实战(第十二...</a>
                <p class="comment ellipsis">
                    <a href="https://my.csdn.net/xuanRans" class="user-name" target="_blank">xuanRans：</a>作者麻烦看看这个问题，https://www.oschina.net/question/3781776_2284036                </p>
            </li>
                    </ul>
    </div>
</div>
		<div id="asideFooter">
			
		<div class="aside-box">
			<div id="kp_box_57" data-pid="57" data-track-view='{"mod":"kp_popu_57-77","con":",,"}' data-track-click='{"mod":"kp_popu_57-77","con":",,"}'><script type="text/javascript">
    (function() {
        var s = "_" + Math.random().toString(36).slice(2);
        document.write('<div style="" id="' + s + '"></div>');
        (window.slotbydup = window.slotbydup || []).push({
            id: "u3163270",
            container:  s
        });
    })();
</script>
<!-- 多条广告如下脚本只需引入一次 -->
<script type="text/javascript" src="//cpro.baidustatic.com/cpro/ui/c.js" async="async" defer="defer" ></script></div>		</div>
				<div class="aside-box">
			<div class="persion_article">
			</div>
		</div>
	</div>
</aside>
<script src="https://csdnimg.cn/pubfooter/js/publib_footer-1.0.3.js" data-isfootertrack="false" type="text/javascript"></script>
<script>
	$("a.flexible-btn").click(function(){
		$(this).parents('div.aside-box').removeClass('flexible-box');
		$(this).remove();
	})
</script>
</div>
<div class="mask-dark"></div>
<div class="pulllog-box" style="display: block;">
	<div class="pulllog clearfix">
		<span class="text float-left">
            <div id="dmp_ad_69"><div id="kp_box_69" data-pid="69" data-track-view='{"mod":"kp_popu_69-864","con":",,"}' data-track-click='{"mod":"kp_popu_69-864","con":",,"}'><div style="float:left;margin-right:5px;border:1px solid #f13d3d;padding:2px 5px 0px 5px;">
<a href="https://edu.csdn.net/topic/python115?utm_source=ditong" target="_blank" style="color:#f13d3d;font-weight:bold;text-decoration:none;font-size:15px;">Python怎么学</a>
</div>

<div style="float:left;margin-right:5px;border:1px solid #00BFFF;padding:2px 5px 0px 5px;background:#FFF0F5;">
<a href="https://edu.csdn.net/topic/ai30?utm_source=ditong" target="_blank" style="color:#00BFFF;font-weight:bold;text-decoration:none;font-size:15px;">转型AI人工智能指南</a>
</div>

<div style="float:left;margin-right:5px;border:1px solid #f13d3d;padding:2px 5px 0px 5px;">
<a href="https://edu.csdn.net/topic/java1?utm_source=ditong" target="_blank" style="color:#f13d3d;font-weight:bold;text-decoration:none;font-size:15px;">Java学习路线</a>
</div>

<div style="float:left;margin-right:5px;border:1px solid #00BFFF;padding:2px 5px 0px 5px;background:#FFF0F5;">
<a href="https://gitbook.cn/gitchat/column/5c86261f029620739b167498?utm_source=wzl190315" target="_blank" style="color:#00BFFF;font-weight:bold;text-decoration:none;font-size:15px;">28 天算法训练营</a>
</div>

<div style="float:left;margin-right:5px;border:1px solid #f13d3d;padding:2px 5px 0px 5px;">
<a href="https://pythondevdays2019.csdn.net/?utm_source=dbad" target=" target="_blank" style="color:#f13d3d;font-weight:bold;text-decoration:none;font-size:15px;">2019 Python 开发者日</a>
</div>



<div style="float:left;">
<script type="text/javascript" src="//rabc1.iteye.com/common/js/ndr3h.js?b=wosyvccl"></script>
<!-- 长文字链
<script type="text/javascript" src="//rabc1.iteye.com/common/5klj5.js?kfxbghx=bx"></script>
-->
</div></div></div>            		</span>
		<div class="pulllog-btn float-right clearfix">
            <div class="float-left csdn-tracking-statistics tracking-click" data-mod="popu_557">
                <a class="pulllog-login">登录</a>
            </div>
            <div class="pulllog-sigin float-left csdn-tracking-statistics tracking-click" data-mod="popu_558">
                <a href="https://passport.csdn.net/account/mobileregister" target="_blank">注册</a>
            </div>
            <button class="btn-close">
                <svg class="icon" aria-hidden="true">
                    <use xlink:href="#csdnc-times"></use>
                </svg>
            </button>
		</div>
	</div>
</div>
<div id="loginWrap" style="display:none"></div>
<div class="tool-box">
	<ul class="meau-list">
		<li class="btn-like-box long-width">
			<button class=" long-height hover-box btn-like " title="点赞">
				<svg class="icon active hover-hide" aria-hidden="true">
					<use xlink:href="#csdnc-thumbsup-ok"></use>
				</svg>
				<svg class="icon no-active hover-hide" aria-hidden="true">
					<use xlink:href="#csdnc-thumbsup"></use>
				</svg>
				<span class="hover-show text-box text">
					<span class="no-active">点赞</span>
					<span class="active">取消点赞</span>
				</span>
				<p>10</p>
			</button>
		</li>
		<li class="">
						<a class="btn-comments long-height hover-box" title="写评论" href="#commentBox">
				<svg class="icon hover-hide" aria-hidden="true">
					<use xlink:href="#csdnc-comments"></use>
				</svg>
				<span class="hover-show text">评论</span>
				<p class="">
						3				</p>
			</a>
		</li>
		<li class="toc-container-box" id="liTocBox">
			<button class="btn-toc low-height hover-box" title="目录">
				<svg class="icon hover-hide" aria-hidden="true">
					<use xlink:href="#csdnc-contents"></use>
				</svg>
				<span class="hover-show text">目录</span>
			</button>
			<div class="toc-container">
				<div class="pos-box">
					<div class="icon-arrow"></div>
					<div class="scroll-box">
						<div class="toc-box"></div>
					</div>
				</div>
				<div class="opt-box">
					<button class="btn-opt prev nomore" title="向上">
						<svg class="icon" aria-hidden="true">
							<use xlink:href="#csdnc-chevronup"></use>
						</svg>
					</button>
					<button class="btn-opt next">
						<svg class="icon" aria-hidden="true">
							<use xlink:href="#csdnc-chevrondown"></use>
						</svg>
					</button>
				</div>
			</div>
		</li>
		<li>
			<button class="btn-bookmark low-height hover-box" title="收藏">
				<svg class="icon active hover-hide" aria-hidden="true">
					<use xlink:href="#csdnc-bookmark-ok"></use>
				</svg>
				<svg class="icon no-active hover-hide" aria-hidden="true">
					<use xlink:href="#csdnc-bookmark"></use>
				</svg>
					<span class="hover-show text">收藏</span>
				<!-- <span class="hover-show text-box text">
					<span class="no-active">收藏</span>
					<span class="active">取消收藏</span>
				</span> -->
			</button>
		</li>
		<li class="bdsharebuttonbox">
			<div class="weixin-qr btn-comments low-height hover-box" >
        <a href="#" class="bds_weixin clear-share-style" data-cmd="weixin" title="手机看"></a>
				<svg class="icon hover-hide" aria-hidden="true">
					<use xlink:href="#csdnc-usephone"></use>
				</svg>
				<span class="hover-show text text3">
					手机看
				</span>
			</div>
		</li>
							<li class="widescreen-hide">
				<a class="btn-comments low-height hover-box" href="https://blog.csdn.net/liaokailin/article/details/49048557" title="spring boot实战(第九篇)Application创建源码分析">
					<svg class="icon hover-hide" aria-hidden="true">
						<use xlink:href="#csdnc-chevronleft"></use>
					</svg>
					<span class="hover-show text text3">上一篇</span>
				</a>
			</li>
								<li class="widescreen-hide">
			<a class="btn-comments hover-box low-height" href="https://blog.csdn.net/liaokailin/article/details/49558605" title="spring boot实战(第十一篇)初识RabbitMQ">
				<svg class="icon hover-hide" aria-hidden="true">
					<use xlink:href="#csdnc-chevronright"></use>
				</svg>
				<span class="hover-show text text3">下一篇</span>
			</a>
		</li>
						<!-- 宽屏更多按钮 -->
		<li class="widescreen-more">
			<a class="btn-comments chat-ask-button low-height hover-box" title="快问" href="#chatqa">
				<svg class="icon hover-hide" aria-hidden="true">
					<use xlink:href="#csdnc-more"></use>
				</svg>
				<span class="hover-show text">更多</span>
				
			</a>
			<ul class="widescreen-more-box">
													<li class="widescreen-more">
						<a class="btn-comments low-height hover-box" href="https://blog.csdn.net/liaokailin/article/details/49048557" title="spring boot实战(第九篇)Application创建源码分析">
							<svg class="icon hover-hide" aria-hidden="true">
								<use xlink:href="#csdnc-chevronleft"></use>
							</svg>
							<span class="hover-show text text3">上一篇</span>
						</a>
					</li>
																<li class="widescreen-more">
					<a class="btn-comments hover-box low-height" href="https://blog.csdn.net/liaokailin/article/details/49558605" title="spring boot实战(第十一篇)初识RabbitMQ">
						<svg class="icon hover-hide" aria-hidden="true">
							<use xlink:href="#csdnc-chevronright"></use>
						</svg>
						<span class="hover-show text text3">下一篇</span>
					</a>
				</li>
							</ul>
		</li>
	</ul>
</div>
<script>window._bd_share_config = { "common": { "bdSnsKey": {}, "bdText": "", "bdMini": "1", "bdMiniList": false, "bdPic": "", "bdStyle": "0", "bdSize": "16" }, "share": {} }; with (document) 0[(getElementsByTagName('head')[0] || body).appendChild(createElement('script')).src = 'https://csdnimg.cn/static/api/js/share.js?v=89860594'];</script>
<script>
    var recommendCount = 67;
    recommendCount = recommendCount > 1 ? (recommendCount + (recommendCount>6 ? 2 : 1)) : recommendCount;
    var articleTit = articleTitles;
    var ChannelId = 16;
    var articleId = "49107209";
    var commentscount = 3;
    var islock = false;
    var curentUrl = "https://blog.csdn.net/liaokailin/article/details/49107209";
    var myUrl = "https://my.csdn.net/";
    //1禁止评论，2正常
    var commentAuth = 2;
    //百度搜索
    var baiduKey = "spring boot实战(第十篇)Spring boot Bean加载源码分析 - liaokailin的专栏";
    var needInsertBaidu = false;
    // 代码段样式
    var codeStyle = '';
		var highlight = ["spring","boot","\u5b9e\u6218","\u7b2c\u5341\u7bc7","spring","boot","bean","\u52a0\u8f7d","\u6e90\u7801\u5206\u6790"];//高亮数组
		// 相关推荐博主数据
    var RecommendBlogExpertList = [{"user_name":"Lzy_YY","nick_name":"AE-86","avatar":"https:\/\/avatar.csdn.net\/D\/D\/F\/3_lzy_yy.jpg","is_expert":false,"article_count":8,"rank":"\u5343\u91cc\u4e4b\u5916"},{"user_name":"c_zhouwei084","nick_name":"c_zhouwei084","avatar":"https:\/\/avatar.csdn.net\/8\/4\/8\/3_c_zhouwei084.jpg","is_expert":false,"article_count":50,"rank":"\u5343\u91cc\u4e4b\u5916"},{"user_name":"zhuhai__yizhi","nick_name":"zhuhai__yizhi","avatar":"https:\/\/avatar.csdn.net\/4\/0\/7\/3_zhuhai__yizhi.jpg","is_expert":false,"article_count":1174,"rank":"1000+"},{"user_name":"zhaocuit","nick_name":"cuit_618","avatar":"https:\/\/avatar.csdn.net\/8\/3\/A\/3_zhaocuit.jpg","is_expert":false,"article_count":43,"rank":"\u5343\u91cc\u4e4b\u5916"},{"user_name":"jiulanhao","nick_name":"\u62bd\u98ce\u540c\u5b66","avatar":"https:\/\/avatar.csdn.net\/F\/F\/E\/3_jiulanhao.jpg","is_expert":false,"article_count":152,"rank":"\u5343\u91cc\u4e4b\u5916"},{"user_name":"zhongzunfa","nick_name":"zhongzunfa","avatar":"https:\/\/avatar.csdn.net\/1\/6\/2\/3_zhongzunfa.jpg","is_expert":false,"article_count":108,"rank":"\u5343\u91cc\u4e4b\u5916"},{"user_name":"qq523786283","nick_name":"AI\u84b8\u6c7d\u4eba","avatar":"https:\/\/avatar.csdn.net\/9\/6\/B\/3_qq523786283.jpg","is_expert":false,"article_count":87,"rank":"\u5343\u91cc\u4e4b\u5916"},{"user_name":"u010002184","nick_name":"\u4e8c\u5341\u516d\u753b\u751f\u7684\u535a\u5ba2","avatar":"https:\/\/avatar.csdn.net\/9\/3\/3\/3_u010002184.jpg","is_expert":false,"article_count":817,"rank":"1000+"},{"user_name":"qq_27721169","nick_name":"\u4f1a\u8fdf\u5230\u4f46\u4e0d\u4f1a\u7f3a\u5e2d","avatar":"https:\/\/avatar.csdn.net\/3\/1\/6\/3_qq_27721169.jpg","is_expert":false,"article_count":108,"rank":"\u5343\u91cc\u4e4b\u5916"},{"user_name":"lz710117239","nick_name":"lz710117239","avatar":"https:\/\/avatar.csdn.net\/9\/A\/A\/3_lz710117239.jpg","is_expert":false,"article_count":273,"rank":"\u5343\u91cc\u4e4b\u5916"}];
	var articleType = 1;
	var CopyrightContent = '';
    var current_user_name = '';
</script>
<script src="https://csdnimg.cn/public/sandalstrap/1.4/js/sandalstrap.min.js"></script>
<script src="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.js"></script>
<script src='https://csdnimg.cn/public/common/gotop/js/goTop-v1.0.min.js?v201811201455'></script>
<script>
    GoTop({
        right: 8,
        hasReport: true,
        reportFun: function() {
            showReport(false,articleTit);
        }
    })
</script>

</body>

<!-- 右侧第四栏 -->
<div class="fourth_column">
	<div class="title-box">
		<b class="title">猿学习</b>
		<span class="fourth_column_close">    
			<svg class="icon" aria-hidden="true">
				<use xlink:href="#csdnc-times"></use>
			</svg>
		</span>
		
	</div>
	<ul class="">
		<li><div id="kp_box_456" data-pid="456" data-track-view='{"mod":"kp_popu_456-802","con":",,"}' data-track-click='{"mod":"kp_popu_456-802","con":",,"}'><a href="https://edu.csdn.net/topic/python115?utm_source=blogright" target="_blank">  <div class="blogkp1"><img src="http://img-ads.csdn.net/2019/201901081438577084.png"width="100" height="100"><h6>程序员2019年学Python</h6></div></a></div></li>		<li><div id="kp_box_457" data-pid="457" data-track-view='{"mod":"kp_popu_457-681","con":",,"}' data-track-click='{"mod":"kp_popu_457-681","con":",,"}'><img src="http://img-ads.csdn.net/2019/201901081453403307.jpg"width="100" height="100"></div></li>		<li><div id="kp_box_458" data-pid="458" data-track-view='{"mod":"kp_popu_458-640","con":",,"}' data-track-click='{"mod":"kp_popu_458-640","con":",,"}'><a href="https://gitchat.csdn.net/column/5a7d1a13a7f22b3dffca7e49?utm_source=csdn100" target="_blank"><div class="blogkp3"><img src="http://img-ads.csdn.net/2018/201811091452349556.png"width="100" height="100"><h6>Python 爬虫和数据分析实战</h6><span style="position:absolute;right:0;bottom:0;background:url(https://img-ads.csdn.net/2016/201608021757063065.png) no-repeat;width:33px;height:18px;display:block;z-index: 9999;"></span></div></a></div></li>		<li><div id="kp_box_459" data-pid="459" data-track-view='{"mod":"kp_popu_459-684","con":",,"}' data-track-click='{"mod":"kp_popu_459-684","con":",,"}'><img src="http://img-ads.csdn.net/2018/201811231419286183.jpg"width="100" height="100"></div></li>	</ul>
</div>
<script type="text/javascript">
	$('.fourth_column_close').click(function(){
		$('.fourth_column').remove();
	})
</script>
<!-- 右侧第四栏end -->
<!-- 高亮未与 markdown兼容  -->
	<link rel="stylesheet" href="https://csdnimg.cn/release/blog_editor_html/release1.3.8/ckeditor/plugins/chart/chart.css" />
	<script type="text/javascript" src="https://csdnimg.cn/release/blog_editor_html/release1.3.8/ckeditor/plugins/chart/lib/chart.min.js"></script>
	<script type="text/javascript" src="https://csdnimg.cn/release/blog_editor_html/release1.3.8/ckeditor/plugins/chart/widget2chart.js"></script>
	<link rel="stylesheet" href="https://csdnimg.cn/release/blog_editor_html/release1.3.8/ckeditor/plugins/codesnippet/lib/highlight/styles/atom-one-light.css">
	<script type="text/javascript" src="https://csdnimg.cn/release/phoenix/production/pc_wap_common-98040b5dc6.js" /></script>

	<script type="text/javascript">
	$(function(){
		var allEscRegex = /&(lt|gt|amp|quot|nbsp|shy|#\d{1,5});/g,
		    namedEntities = {
					lt: '<',
					gt: '>',
					amp: '&',
					quot: '"',
					nbsp: '\u00a0',
					shy: '\u00ad'
				}
		var allEscDecode = function( match, code ) {
				return namedEntities[ code ];
		};
		htmlDecodeAttr = function( text ) {
				return text.replace( allEscRegex, allEscDecode );
		}
	  hljs.initHighlighting();
	  hljs.initCopyButtonOnLoad();
	  hljs.initLineNumbersOnLoad();
		if($('pre .language-plain').length>0){
			$('pre .language-plain').each(function(i,e){
				var highlightRe = hljs.highlightAuto(htmlDecodeAttr(e.innerHTML))
				e.innerHTML = highlightRe.value;
				e.className = 'language-'+highlightRe.language;
			});
		}
	})
	</script>

<script src="//g.csdnimg.cn/??login-box/1.0.5/login-box.js,login-box/1.0.5/login-auto.js?t=20190307095522"></script>
<script src="https://csdnimg.cn/release/phoenix/template/js/common-54efcefd0c.min.js"></script>
<script src="https://csdnimg.cn/release/phoenix/template/js/detail-88e152fce1.min.js"></script>

	<script src="https://csdnimg.cn/release/phoenix/themes/skin3-template/skin3-template-fc7383b956.min.js"></script>


<!-- <script type="text/javascript" src="//g.csdnimg.cn/check-adb/1.0.2/check-adb.js"></script> -->

<script type="text/javascript" src="https://csdnimg.cn/release/blog_mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
            "HTML-CSS": {
                    linebreaks: { automatic: true, width: "94%container" },
                    imageFont: null
            },
            tex2jax: {
                preview: "none"
            },
            mml2jax: {
                preview: 'none'
            }
    });
</script>
<script type="text/javascript">
            window.baidu_blueword ={
            di:'24004469_oem_dg',
            id:['content_views'],// 需要飘蓝区域：id要求以数组或，分隔的字符串形式传入
            blueclass:['baidu_pl'],// 需要飘蓝区域：class要求以数组或，分隔的字符串形式传入, 传入值会覆盖默认值
            user:'',
            isMobile:false,
            title: document.title,
            page_url: location.href,
            ignore:'baidu-blue-word-no',// 需要忽略掉的区域1
            frequency:1,// 词频1
            maxword:3// 最大接受飘词个数
        }
    </script>
<script src="https://gh.bdstatic.com/static/gh/js/sdk/bword.min.js"></script>
</html>
